/* CSS transforms change the shape and position of the affected content without disrupting the normal document flow. This guide provides an introduction to using transforms.

These transformations include rotation, skewing, scaling, and translation both in the plane and in the 3D space.


CSS transforms properties:  

Two major properties are used to define CSS transforms: 
1.  transform (or the individual translate, rotate, and scale properties) 
2.  transform-origin.


1.  transform: Specifies the transforms to apply to the element. It is a space-separated list of transforms Composite transforms are effectively applied in order from right to left.


2. transform-origin:  the position of the origin. By default, it is at the center of the element and can be moved. It is used by several transforms, like rotations, scaling or skewing, that need a specific point as a parameter. */


/* Example */
.flex {
    display: flex;
    justify-content: center;
}

.img {
    margin: 25px;
    position: relative;
    /* text-align: center; */
}

.img::before {
    content: "";
    position: absolute;
    bottom: -10px;
    width: 100%;
    height: 4px;
    background-color: black;
}


.flex .img:nth-child(2) {

    /* Here is the MDN logo rotated 90 degrees from its bottom-right corner */
    /* transform: rotate(90deg);
    transform-origin: bottom right; */

    /* Here is the MDN logo, skewed by 10 degrees and translated by 150 pixels on the X-axis. */
    /* transform: skew(10deg) translateX(150px); */
    /* transform-origin: bottom right; */
}


/* 3D specific CSS properties */
/* CSS transformations in 3D space is a bit more complex. You have to start by configuring the 3D space by giving it a perspective, then you have to configure how your 2D elements will behave in that space. */


/* Perspective
The perspective is what gives us the 3D impression. The farther from the viewer the elements are, the smaller they are. How quick the cube shrinks is defined by the perspective property. The smaller its value is, the deeper the perspective is. */

.flex .img:nth-child(2){
    transform: perspective(300px) rotateY(55deg);
}




/* transform-function: The <transform-function> CSS data type represents a transformation that affects an element's appearance. Transformation functions can rotate, resize, distort, or move an element in 2D or 3D space. It is used in the transform property.

Syntax: */


/* Translation (moving)

    translate: The translate() CSS function repositions an element in the horizontal and/or vertical directions. Its result is a    <transform-function> data type. */

    /* Syntax:  */
            /* transform: translate(200px) | translate(100px, 230px) | translate(120px,50%); */

            /* Value:
                    single value: representing the abscissa (horizontal, x-component) of the translating vector [tx, 0]. The ordinate (vertical, y-component) of the translating vector will be set to 0. For example, translate(2px) is equivalent to translate(2px, 0).

                    Double value: representing both the abscissa (horizontal, x-component) and the ordinate (vertical, y-component) of the translating vector [tx, ty]. */


.translate{
    width: 160px;
    height: 160px;
    background: blue;
    border: 2px solid black;
    border-radius: 10px;

    /* transform: translate(200px); */
    /* transform: translate(200px,300px); */
}


    /* translateX(): The translateX() CSS function repositions an element horizontally on the 2D plane. Its result is a <transform-function> data type.

    Syntax: 
            transform: translateX(200px) | translate(40%); */

.translate{
    /* transform: translateX(200px); */
    /* transform: translateX(60rem); */
}


    /* translateY(): The translateY() CSS function repositions an element vertically on the 2D plane. Its result is a <transform-function> data type.

    Syntax: 
            transforn: translateY(100PX) | translateY(50%); */


.translate{
    /* transform: translateY(100px); */
}


    /* translateZ(): The translateZ() CSS function repositions an element along the z-axis in 3D space, i.e., closer to or farther away from the viewer. Its result is a <transform-function> data type.

    Syntax:
            transform: translateZ(100px) | translate(28%) */

.translate{
    /* transform: perspective(500px) translateZ(200px) translateX(100px); */
}



    /* translate3d(): The translate3d() CSS function repositions an element in 3D space. Its result is a <transform-function> data type.

    Syntax:
            transform: translate3d(tx , ty , tz); */

.translate{
    transform: translate3d(100px , 200px , 100px);
}


/* Rotation */

    /* rotate(): The rotate() CSS function defines a transformation that rotates an element around a fixed point on the 2D plane, without deforming it. Its result is a <transform-function> data type.
    The fixed point that the element rotates around — mentioned above — is also known as the transform origin. This defaults to the center of the element, but you can set your own custom transform origin using the transform-origin property.


    Syntax:
            transform: rotate(deg)  Equal to rotateZ(45deg) ; */


.rotate{
    width: 160px;
    height: 160px;
    background: blue;
    border: 2px solid black;
    border-radius: 10px;
    /* animation: 3s linear 2s infinite a; */

    transform: rotate(340deg) translateX(200px);
}


/* @keyframes a {
    0%{
        transform: rotate(0deg) ;
        transform-origin: center;
    }
    100%{
        transform: rotate(360deg);
        transform-origin: center;
    }
} */


    /* rotateX: The rotateX() CSS function defines a transformation that rotates an element around the x-axis (horizontal) without deforming it. Its result is a <transform-function> data type.
    The axis of rotation passes through an origin, defined by the transform-origin CSS property.

    Syntax: 
            transform: rotateX(angle); */

.rot{
    width: 180px;
    height: 180px;

    /* transform: rotateX(-0.2turn); */
    /* transform: rotateX(3.142rad); */
    /* transform: rotateX(180deg); */
}



    /* rotateY: The rotateY() CSS function defines a transformation that rotates an element around the y-axis (vertical) without deforming it. Its result is a <transform-function> data type.
    The axis of rotation passes through an origin, defined by the transform-origin CSS property.

    Syntax:
            transform: rotateY(); */

.rot{
    /* transform: rotateY(120deg); */
}


    /* rotateZ: The rotateZ() CSS function defines a transformation that rotates an element around the z-axis without deforming it. Its result is a <transform-function> data type.

    Syntax:
            transform: rotateZ(angle) */


.rot{
     /* transform: rotateZ(60deg); */
}

    /* rotate3d(): The rotate3d() CSS function defines a transformation that rotates an element around a fixed axis in 3D space, without deforming it. Its result is a <transform-function> data type.

    Syntax: 
    The amount of rotation created by rotate3d() is specified by three <number>s and one <angle>. The <number>s represent the x-, y-, and z-coordinates of the vector denoting the axis of rotation. The <angle> represents the angle of rotation; if positive, the movement will be clockwise; if negative, it will be counter-clockwise.

            transform: rotate3d(x, y , z , angle); */


.rot{
    transform: rotate3d(1 , 2 , 3 , 106deg);
}


   
/* Scaling (resizing) */

    /* scale(): The scale() CSS function defines a transformation that resizes an element on the 2D plane. Because the amount of scaling is defined by a vector [sx, sy], it can resize the horizontal and vertical dimensions at different scales.

    When a coordinate value is outside the [-1, 1] range, the element grows along that dimension; when inside, it shrinks. A negative value results in a point reflection in that dimension. The value 1 has no effect.

    Syntax: 
            transform: scale(sx) | scale(sx , sy); */


.scale{
    display: flex;
    justify-content: center;
    gap: 80px;
    margin-bottom: 70px;
}

.scale .scale-child{
    width: 120px;
    height: 120px;
}

.scale .scale-child-2{

    /* Equal to scaleX(0.7) scaleY(0.7) */
    /* transform: scale(0.7);  */

    /* transform: scale(2 , .5); */
}


    /* ScaleX: The scaleX() CSS function defines a transformation that resizes an element along the x-axis (horizontally). Its result is a <transform-function> data type.
    It modifies the abscissa (horizontal, x-coordinate) of each element point by a constant factor, except when the scale factor is 1, in which case the function is the identity transform.

    Note: scaleX(sx) is equivalent to scale(sx, 1) or scale3d(sx, 1, 1).

    Syntax: 
            transform: scaleX(value) */



.scale .scale-child-2{
    /* transform: scaleX(2); */
}


    /* scaleY: The scaleY() CSS function defines a transformation that resizes an element along the y-axis (vertically). Its result is a <transform-function> data type.
    It modifies the ordinate (vertical, y-coordinate) of each element point by a constant factor, except when the scale factor is 1, in which case the function is the identity transform.

    Note: scaleY(sy) is equivalent to scale(1, sy) or scale3d(1, sy, 1). transform: rotateX(180deg); === transform: scaleY(-1);

    Suntax: 
            transform: scaleY(value) */

.scale .scale-child-2{
    /* transform: scaleY(2); */
}


    /* scaleZ(): The scaleZ() CSS function defines a transformation that resizes an element along the z-axis. Its result is a <transform-function> data type.
    This scaling transformation modifies the z-coordinate of each element point by a constant factor, except when the scale factor is 1, in which case the function is the identity transform.

    In the above interactive examples, perspective: 550px; (to create a 3D space) and transform-style: preserve-3d; (so the children, the 6 sides of the cube, are also positioned in the 3D space), have been set on the cube.


    Syntax: 
            transform: scaleZ(value); */


.scale .scale-child-2{
    transform:  perspective(400px) scaleZ(2) translateZ(-100px);
    /* transform: perspective(400px) translateZ(-100px); */
}


    /* scale3d(): The scale3d() CSS function defines a transformation that resizes an element in 3D space. Because the amount of scaling is defined by a vector [sx, sy, sz], it can resize different dimensions at different scales. Its result is a <transform-function> data type.

    This scaling transformation is characterized by a three-dimensional vector. Its coordinates define how much scaling is done in each direction. 
    When a coordinate value is outside the [-1, 1] range, the element grows along that dimension; when inside, it shrinks. */

    /* Syntax: 
            transform: scale3d(sx , sy , sz); */

.scale3{
    display: flex;
    justify-content: center;
    gap: 30px;
    margin-bottom: 30px;
}

.scale3 div{
    font-size: 22px;
}

.scale3 .normal{
    width: 100px;
    height: 100px;
    background-color: pink;
}

.scale3 .scaled{
    transform: perspective(500px) scale3d(3,0.7,0.2) translateZ(100px);
    background-color: red;
}


/* Skewing (distortion) */

    /* skew(): The skew() CSS function defines a transformation that skews an element on the 2D plane. Its result is a <transform-function> data type.
    The coordinates of each point are modified by a value proportionate to the specified angle and the distance to the origin. Thus, the farther from the origin a point is, the greater the value added to it.

    Syntax:
    The skew() function is specified with either one or two values, which represent the amount of skewing to be applied in each direction. If you only specify one value it is used for the x-axis and there will be no skewing on the y-axis.

            transform: skew(ax) | skew(ax,ay); */
                /* a = angle */

.skew{
    display: flex;
    justify-content: center;
    gap: 30px;
    margin-bottom: 30px;
}
                
.skew div{
    font-size: 22px;
    width: 100px;
    height: 100px;
}
                
.skew .normal{
    background-color: pink;
}
                
.skew .scaled{
    /* transform: skew(20deg); */
    /* transform: skew(-25deg , 25deg); */
    background-color: red;
}


    /* skewX(): The skewX() CSS function defines a transformation that skews an element in the horizontal direction on the 2D plane. Its result is a <transform-function> data type.

    Syntax:
            transform: skew(angle); */

.skew .scaled{
    /* transform: skewX(45deg); */
}

/* 
    skewY(): The skewY() CSS function defines a transformation that skews an element in the vertical direction on the 2D plane. Its result is a <transform-function> data type.

    Syntax:     
            transform: skewY(angle); */


.skew .scaled{
    transform: skewY(50deg);
}



/* Matrix transformation */

    /* matrix(): The matrix() CSS function defines a homogeneous 2D transformation matrix. Its result is a <transform-function> data type.

    Syntax: 
            transform: matrix(a , b , c , d , tx , ty);

    The matrix() function is specified with six values. 
            a, b, c, d: These parameters are used to describe the linear transformation.
            tx: This parameter is used to describe the linear translation on x-axis.
            ty: This parameter is used to describe the linear translation on y-axis. */


.matrix{
    width: 200px;
    height: 100px;
    background-color: yellow;
    margin-bottom: 40px;
    margin-left: 30px;

    transform: matrix(1 , 0 , 2 , 1 , 13 , 1);
}


    /* matrix3d(): The matrix3d() CSS function defines a 3D transformation as a 4x4 homogeneous matrix. Its result is a <transform-function> data type.

    Syntax: 
            transform: matrix3d(a1 , b1 , c1 , d1 , a2 , b2 , c2 , d2 , a3 , b3 , c3 , d3 , a4 , b4 , c4 , d4);

    The matrix3d() function is specified with 16 values.
            a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, d4: These parameters are used to hold the value for linear transformation.
            a4, b4, c4: These parameters are used to hold the value of translation. */


.matrix3{
    width: 200px;
    height: 100px;
    background-color: yellow;
    margin-bottom: 40px;
    margin-left: 30px;

    transform: matrix3d(
        0.6, 0.1, 0.7, 0,
        -0.5, 0.8, 0.1, 0,
        -0.6, -0.5, 0.5, 0,
        0, 0, 0, 1
    );
}


/* Perspective */

    /* perspective(): The perspective() CSS function defines a transformation that sets the distance between the user and the z=0 plane, the perspective from which the viewer would be if the 2-dimensional interface were 3-dimensional. Its result is a <transform-function> data type.

    This differs from the perspective and perspective-origin properties which are attached to the parent of a child transformed in 3-dimensional space.

    Syntax:
            transform: perspective(lenght);

    The distance between the user and the z=0 plane, or by none.  The z=0 plane is the plane where everything appears in a 2-dimensional view, or the screen.
    Negative values are syntax errors. 
    Large values of perspective represent a small transformation; small values of perspective() represent a large transformation; perspective(none) represents perspective from infinite distance and no transformation. */

    
.perspective img{
    transform: perspective(400px) rotateY(70deg);
}


/* transform:  The transform CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model. */


/* Syntax */

    /* transform: translate | scale | skew | matrix | matrix3d | Perspective | rotate; */