/* CSS transforms change the shape and position of the affected content without disrupting the normal document flow. This guide provides an introduction to using transforms.

These transformations include rotation, skewing, scaling, and translation both in the plane and in the 3D space.


CSS transforms properties:  

Two major properties are used to define CSS transforms: 
1.  transform (or the individual translate, rotate, and scale properties) 
2.  transform-origin.


1.  transform: Specifies the transforms to apply to the element. It is a space-separated list of transforms Composite transforms are effectively applied in order from right to left.


2. transform-origin:  the position of the origin. By default, it is at the center of the element and can be moved. It is used by several transforms, like rotations, scaling or skewing, that need a specific point as a parameter. */


/* Example */
.flex {
    display: flex;
    justify-content: center;
}

.img {
    margin: 25px;
    position: relative;
    /* text-align: center; */
}

.img::before {
    content: "";
    position: absolute;
    bottom: -10px;
    width: 100%;
    height: 4px;
    background-color: black;
}


.flex .img:nth-child(2) {

    /* Here is the MDN logo rotated 90 degrees from its bottom-right corner */
    /* transform: rotate(90deg);
    transform-origin: bottom right; */

    /* Here is the MDN logo, skewed by 10 degrees and translated by 150 pixels on the X-axis. */
    /* transform: skew(10deg) translateX(150px); */
    /* transform-origin: bottom right; */
}


/* 3D specific CSS properties */
/* CSS transformations in 3D space is a bit more complex. You have to start by configuring the 3D space by giving it a perspective, then you have to configure how your 2D elements will behave in that space. */


/* Perspective
The perspective is what gives us the 3D impression. The farther from the viewer the elements are, the smaller they are. How quick the cube shrinks is defined by the perspective property. The smaller its value is, the deeper the perspective is. */

.flex .img:nth-child(2){
    transform: perspective(300px) rotateY(55deg);
}




/* transform-function: The <transform-function> CSS data type represents a transformation that affects an element's appearance. Transformation functions can rotate, resize, distort, or move an element in 2D or 3D space. It is used in the transform property.

Syntax: */


/* Translation (moving)

    translate: The translate() CSS function repositions an element in the horizontal and/or vertical directions. Its result is a    <transform-function> data type. */

    /* Syntax:  */
            /* transform: translate(200px) | translate(100px, 230px) | translate(120px,50%); */

            /* Value:
                    single value: representing the abscissa (horizontal, x-component) of the translating vector [tx, 0]. The ordinate (vertical, y-component) of the translating vector will be set to 0. For example, translate(2px) is equivalent to translate(2px, 0).

                    Double value: representing both the abscissa (horizontal, x-component) and the ordinate (vertical, y-component) of the translating vector [tx, ty]. */


.translate{
    width: 160px;
    height: 160px;
    background: blue;
    border: 2px solid black;
    border-radius: 10px;

    /* transform: translate(200px); */
    /* transform: translate(200px,300px); */
}


    /* translateX(): The translateX() CSS function repositions an element horizontally on the 2D plane. Its result is a <transform-function> data type.

    Syntax: 
            transform: translateX(200px) | translate(40%); */

.translate{
    /* transform: translateX(200px); */
    /* transform: translateX(60rem); */
}


    /* translateY(): The translateY() CSS function repositions an element vertically on the 2D plane. Its result is a <transform-function> data type.

    Syntax: 
            transforn: translateY(100PX) | translateY(50%); */


.translate{
    /* transform: translateY(100px); */
}


    /* translateZ(): The translateZ() CSS function repositions an element along the z-axis in 3D space, i.e., closer to or farther away from the viewer. Its result is a <transform-function> data type.

    Syntax:
            transform: translateZ(100px) | translate(28%) */

.translate{
    /* transform: perspective(500px) translateZ(200px) translateX(100px); */
}



    /* translate3d(): The translate3d() CSS function repositions an element in 3D space. Its result is a <transform-function> data type.

    Syntax:
            transform: translate3d(tx , ty , tz); */

.translate{
    transform: translate3d(100px , 200px , 100px);
}


/* Rotation */

    /* rotate(): The rotate() CSS function defines a transformation that rotates an element around a fixed point on the 2D plane, without deforming it. Its result is a <transform-function> data type.
    The fixed point that the element rotates around — mentioned above — is also known as the transform origin. This defaults to the center of the element, but you can set your own custom transform origin using the transform-origin property.


    Syntax:
            transform: rotate(deg)  Equal to rotateZ(45deg) ; */


.rotate{
    width: 160px;
    height: 160px;
    background: blue;
    border: 2px solid black;
    border-radius: 10px;
    /* animation: 3s linear 2s infinite a; */

    transform: rotate(340deg) translateX(200px);
}


/* @keyframes a {
    0%{
        transform: rotate(0deg) ;
        transform-origin: center;
    }
    100%{
        transform: rotate(360deg);
        transform-origin: center;
    }
} */



/* transform:  The transform CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model. */


/* Syntax */

    /* transform: translate(12px,50%); */