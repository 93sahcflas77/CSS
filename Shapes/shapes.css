/* The specification defines three new properties: */
/* 1. Shape-outside: allows definition of basic shapes
2. shape-image-threshold: Sets an opacity threshold value. If an image is being used to define the shape, only the parts of the image that are the same opacity or greater than the threshold value are used in the shape. Any other parts are ignored.
3. shape-margin: sets a margin around the defined shape */

/* Defining basic shapes */
/* The shape-outside property allows us to a define a shape. It takes a variety of values, all of which define different shapes, specified in the <basic-shape> datatype. */


.shape img{
    float: left;
    margin: 20px;
    /* shape-outside: circle(50%) margin-box; */
    shape-outside: circle(50%);

    width: 300px;
    height: 300px;
    border-radius: 50%;
    /* clip-path: circle(50%); */
}   


/* Basic shapes */
/* The specification defines four <basic-shape> values, which are: They range from simple circles to complex polygons. */

/* Two pieces of information that go together to make these shapes possible:
1. The <basic-shape> type
2. The reference box

1. The <basic-shape> type: The <basic-shape> type is used as the value for all of our basic shapes.
 inset()
circle()
ellipse()
polygon() 

2. The reference box: margin-box , border-box , padding-box and content-box */


/* inset(): The inset() type defines a rectangle, which may not seem very useful as floating an item will give you a rectangular shape around it. 
inset() takes four values for the top, right, bottom and left values plus a final value for border-radius. 
*/

.inset{
    width: 60%;
    margin: 20px auto;
    border: 2px solid black;
    padding: 20px;
}

.inset-shape{
    width: 150px;
    height: 150px;
    border: 2px solid black;
    border-radius: 10px;
    background-color: blue;
    float: left;
    margin: 20px;
    padding: 20px;

    shape-outside: inset(31px 51px 53px 0 round 88px);
}


/* circle():  */
/* The circle() value for shape-outside can accept two possible arguments.
The first is the shape-radius.
The second argument is a position. If omitted this will be set to center. */
.circle{
    width: 60%;
    margin: 20px auto;
    border: 2px solid black;
    padding: 20px;
}

.circle-shape{
    width: 150px;
    height: 150px;
    /* border: 2px solid black; */
    border-radius: 50%;
    /* background-color: blue; */
    margin: 5px;

    float: left;
    shape-outside: circle(50%);
    shape-outside: circle(50% at 30%);
    shape-outside: circle(50% at top left);
}


/* ellipse(): An ellipse is essentially a squashed circle and so ellipse() acts in a very similar way to circle() except that we have to specify two radii x and y in that order. */
/* In the example below we have an ellipse with an x radius of 40%, a y radius of 50% and the position being left.  */

.ellipse{
    width: 60%;
    margin: 20px auto;
    border: 2px solid black;
    padding: 20px;
}

.ellipse-shape{
    width: 100px;
    height: 200px;
    margin: 5px;

    float: left;
    shape-outside: ellipse(40% 50%);
    shape-outside: ellipse(40% 50% at left);

    /* The keyword values of closest-side and farthest-side are useful to create a quick ellipse based on the size of the floated element reference box. */
    shape-outside: ellipse(closest-side farthest-side at 30%) ;

}

/* polygon(): The final Basic Shape is the most complex and enables the creation of many side shapes by way of creating a polygon(). */
/* This shape accepts three or more pairs of values (a polygon must at least draw a triangle).  */

.polygon{
    width: 60%;
    margin: 20px auto;
    border: 2px solid black;
    padding: 20px;
}

.polygon-shape{
    width: 200px;
    height: 200px;
    margin: 5px;

    float: left;
    shape-outside: polygon( 0 50px, 50px 80px , 50px 210px);
}

/* Shapes from the box value */
/* Shapes can also be created around the box value. Therefore, you could create your shape on */
/* border-box
padding-box
content-box
margin-box */

/* The border-radius values are also supported */

/* CSS box model: A box in CSS has content, padding, border, and margin. */
/* By using Box Values for Shapes we can wrap our content around the edges defined by these values.  */

/* 1. margin-box: The margin-box is the shape defined by the outside margin edge and includes the corner radius of the shape, should border-radius have been used in defining the element.

2. border-box: The border-box value is the shape defined by the outside border edge. This shape follows all of the normal border radius shaping rules for the outside of the border. You still have a border, even if you have not used the CSS border property

3.padding-box: The padding-box value defines the shape enclosed by the outside padding edge. This shape follows all of the normal border radius shaping rules for the inside of the border.

4.content-box: The content-box value defines the shape enclosed by the outside content edge. Each corner radius of this box is the larger of 0 or border-radius − border-width − padding. */


/* example */
.shape-basic{
    margin-top: 248px ;
}

/* example */
.shape-basic .shape{
    background-color:red;
    height: 200px;
    width: 200px;
    border-radius: 50%;
    float: left;
    border-right: 5px solid black;
    margin: 28px;
    padding: 20px;

    shape-outside: border-box;
    shape-outside: content-box;
    shape-outside: padding-box;
    shape-outside: margin-box;

}

/* example */
.example{
    width: 60%;
    margin: 0 auto;
    border: 2px solid black;
    padding: 20px;
}

.example .left-shape{
    margin: 0 20px 20px 0;
    width: 150px;
    height: 150px;
    border-bottom-right-radius: 100%;
    shape-outside: margin-box;
    float: left;
}

.example .right-shape{
    margin: 0 0 20px 20px;
    width: 150px;
    height: 150px;
    border-bottom-left-radius: 100%;
    float: right;
    shape-outside: margin-box;
}

.example p{
    text-align: center;
}

/* Creating shapes from images */
/* To use an image for creating a shape, the image needs to have an Alpha Channel, an area that is not fully opaque. The shape-image-threshold property is used to set a threshold for this opacity. */

.image{
    width: 60%;
    margin: 10px auto;
    border: 2px solid black;
    padding: 20px;
}

.image img{
    float: left;
    shape-outside: url('https://mdn.github.io/css-examples/shapes/images/star-shape1.png');

    shape-margin: 20px;
    shape-image-threshold: 0.5;
}


/* Using images with generated content: I have both used the image as the value of shape-outside and also added it to the page. Many demos do this as it helps to show the shape we are following, however, the shape-outside property is not related to the image that is displayed on the page and so you do not need to display an image to use an image to create a shape. */
.generated-content{
    width: 60%;
    margin: 10px auto;
    border: 2px solid black;
    padding: 20px;
}

.generated-content::before{
    content: "";
    width: 250px;
    height: 250px;
    float: left;
    shape-outside: url('https://mdn.github.io/css-examples/shapes/images/star-shape1.png');

    shape-margin: 20px;
    shape-image-threshold: 0.5;
}

/* Creating shapes using a gradient */
/* Because a CSS gradient is treated as an image, you can use a gradient to generate a shape by having transparent or semi-transparent areas as part of the gradient.

background image of a linear gradient. I am using that same value as the value of shape-outside. The linear gradient goes from purple to transparent. By changing the value of shape-image-threshold, you can decide how transparent the pixels need to be that create the shape. */
.gradient-shape{
    width: 60%;
    margin: 10px auto;
    border: 2px solid black;
    padding: 20px;
}

.gradient-shape::before{
    content: "";
    width: 250px;
    height: 250px;
    float: left;

    /* background-image: linear-gradient(to bottom right , rebeccapurple , transparent);
    shape-outside: linear-gradient(to bottom right , rebeccapurple , transparent); */

    background-image: radial-gradient(ellipse closest-side, rebeccapurple, blue 50%, transparent);
    shape-outside: radial-gradient(ellipse closest-side, rebeccapurple, blue 50%, transparent);
    
    shape-margin: 20px;
    shape-image-threshold: 0.5;
}


/* shape-image-threshold */
/* The shape-image-threshold property is used to set the threshold of image transparency used to define the area of the image used for the shape. 

The shape-image-threshold property is used to set the threshold of image transparency used to define the area of the image used for the shape.  */


.threshold .shapes{
    float: left;
    width: 100px;
    height:100px;
    background-image: linear-gradient(45deg, rebeccapurple, transparent 80%,transparent);
    shape-outside: linear-gradient(45deg, rebeccapurple, transparent 80%,
  transparent);
  shape-image-threshold: 0.4;

}


/* The shape-margin property */
/* The shape-margin property adds a margin to shape-outside. This will further shorten the line boxes of any content wrapping the shape, pushing it away from the shape itself. */
.shape1{
    height: 310px;
}

.shape1 img{
    float: left;
    shape-outside: circle(50%);
    shape-margin: 10px;

    width: 300px;
    height: 300px;
    border-radius: 50%;
}   


/* Using Generated Content as the floated item */
/* In the examples above, we have used images or a visible element to define the shape, meaning that you can see the shape on the page. */

.content{
    width: 60%;
    margin: 0 auto;
    border: 2px solid black;
    padding: 20px;
}

.content::before{
    content: "";
    display: block;
    height: 180px;
    width: 180px;
    border-radius: 50%;
    margin: 20px;
    float: left;
    /* shape-outside: border-box; */
    shape-outside: margin-box;
}


/* Relationship to clip-path */
/* The Basic Shapes and Box values used to create Shapes are the same as those used as values for clip-path. */
/* We have defined a shape using shape-outside: ellipse(40% 50%); and also used clip-path: ellipse(40% 50%); to clip away the same area that we have used to define the shape. */


.clip-path{
    width: 60%;
    margin: 20px auto;
    border: 2px solid black;
    padding: 20px;
}

.clip-path img{
    float: left;
    shape-outside: ellipse(40% 50%);
    clip-path: ellipse(40% 50%);
}