/* 
selector:pseudo-class::pseudo-element{
  
} */

/* A CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s).  */

/* Note: As a rule, double colons (::) should be used instead of a single colon (:). This distinguishes pseudo-classes from pseudo-elements. */

/* For example, ::first-line can be used to change the font of the first line of a paragraph. 
The first line of every <p> element.
    p::first-line {
      color: blue;
      text-transform: uppercase;
}*/
/* 
Syntax:
selector::pseudo-element {
  property: value;
} */

/*
::after , ::before , ::cue , ::cue-region, ::first-letter , ::first-line ,  ::marker , ::placeholder , ::selection*/




/*::after :- In CSS, ::after creates a pseudo-element that is the last child of the selected element. It is often used to add cosmetic content to an element with the content property. It is inline by default.  */

/*Note: The pseudo-elements generated by ::before and ::after are contained by the element's formatting box, and thus don't apply to replaced elements such as <img>, or to <br> elements.  */

/*Syntax:
::after {
   ... 
} */
a::after{
  content: "(" attr(href) ")";
}
.dead-link{
  text-decoration: line-through;
}

.dead-link::after{
  content: "X";  
  display: inline-block;
  width: 40px;
  height: 40px;
  color: red;
  font-weight: 800;
  margin-left: 2px;
}

.boring-text::after{
  content: " <- EXCITING!";
  color:green;
}

.exciting-text::after{
   content: " <- BORING!";
  color:green;
}

.ribbon{
  background-color: blue;
}

.ribbon::after{
  content: "This is a fancy orange box.";
  background-color: gold;
  border: 5px dotted black;
}

span[data-descr]{
  position: relative;
  text-decoration: underline;
  color: blue;
  cursor: help;
}

span[data-descr]:hover::after{
  content: attr(data-descr);
  position: absolute;
  top: 25px;
  left: 15px;
  background-color: #ffffcc;
  color: #000000;
  width: 180px;
  padding: 20px;
  transition: 0.5s;
  border-radius: 10px;
}

em{
  font-size: 18px;
  color: black;
  font-weight: 800;
  position: relative;
  z-index: 1;
  padding: 20px;
  margin-top: 50px;
  display: inline-block;
  transition: 0.5s;
}
em:hover{
  color: white;
  transition: 0.5s;
}

em:hover::after{
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 4px;
  display: inline-block;
  background-color: green;
  color: white;
  z-index: -1;
}

/*content property :-  The content CSS property replaces an element with a generated value.*/

/*Syntax: content: value;*/
/*value

1 . none :- When applied to a pseudo-element, the pseudo-element is not generated. If applied to an element, the value has no effect. example:- content: none;


2. String " " :- Specifies the "alt text" for the element. This value can be any number of text characters. Unicode escape sequences: for example, \000A9 represents the copyright symbol. example:- content: "prefix"; and content: "\000A9";

3. image :- An <image>, denoted by the url() or <gradient> data type. example:- content : url(), linear-gradient(), image-set()

4.  HTML attribute value :- The value of the element's attribute x as a string. example:- content: attr(value string);

5. Language- and position-dependent keywords :- examole :- content: open-quote; , content: close-quote; , content: no-open-quote; and  content: no-close-quote;
*/



/*::before :- In CSS, ::before creates a pseudo-element that is the first child of the selected element. It is often used to add cosmetic content to an element with the content property. It is inline by default. */

/*Note: The pseudo-elements generated by ::before and ::after are contained by the element's formatting box, and thus don't apply to replaced elements such as <img>, or to <br> elements.  */

/*Syntax:
::before {
   ... 
} */




/*::first-letter :-  The ::first-letter CSS pseudo-element applies styles to the first letter of the first line of a block-level element, but only when not preceded by other content (such as images or inline tables).  */

/*Allowable properties
1. All font properties:
2. All background properties:
3. All margin properties:
4. All padding properties:
5. All border properties: 
6. The color property
7. The text-decoration, text-shadow, text-transform, letter-spacing, word-spacing (when appropriate), line-height, text-decoration-color, text-decoration-line, text-decoration-style, box-shadow, float, vertical-align (only if float is none) CSS properties.
*/

/*Syntax:
::first-letter {
   ... 
}
*/
p::first-letter{
  font-size: 2rem;
  color: darkgreen;
  padding-right: 5px;
  text-decoration: none;
}

/*::first-line :-  The ::first-line CSS pseudo-element applies styles to the first line of a block-level element. */

/*Allowable properties:
1. All font-related properties:
2. All background-related properties:
3. The color propertyword-spacing, letter-spacing, text-decoration, text-transform, and line-height
4. text-shadow, text-decoration, text-decoration-color, text-decoration-line, text-decoration-style, and vertical-align.
*/

p::first-line{
  color: blue;
  text-transform: uppercase;
  /* text-decoration: underline; */
  font-size: 15px;
}




/*::marker :- The ::marker CSS pseudo-element selects the marker box of a list item, which typically contains a bullet or number. It works on any element or pseudo-element set to display: list-item, such as the <li> and <summary> elements.  */

/*Allowable properties:
1. All font properties
2. The white-space property
3. color property
4. text-combine-upright, unicode-bidi and direction properties
5. The content property
6. All animation and transition properties
*/

/*Syntax:
::marker {
   ... 
}
*/
li::marker{
  color: red;
}

li::marker{
  content: "‚úù";
  font-size: 18px;
}


/*::placeholder :- The ::placeholder CSS pseudo-element represents the placeholder text in an <input> or <textarea> element.  Only the subset of CSS properties that apply to the ::first-line pseudo-element can be used in a rule using ::placeholder in its selector.*/

/* Syntax:
::placeholder {
   ... 
}
*/
::placeholder{
  color: green;
  padding-left: 2px;
}

input::placeholder{
   opacity: 1;
}


/*::selection :- The ::selection CSS pseudo-element applies styles to the part of a document that has been highlighted by the user (such as clicking and dragging the mouse across text).  */

/*Allowable properties:
1. color property
2. background-color property
3. text-decoration and its associated properties
text-shadow
4. -webkit-text-stroke-color, -webkit-text-fill-color and -webkit-text-stroke-width
*/

/*Syntax:
::selection {
   ... 
}
*/

/* p::selection {
  color: red;
  background-color: yellow;
  text-decoration: underline;
} */

::selection {
  color: red;
  background-color: yellow;
  text-decoration: underline;
}



/*::cue :- The ::cue CSS pseudo-element matches WebVTT cues within a selected element. This can be used to style captions and other cues in media with VTT tracks.  */
/* Syntax:
::cue | ::cue(<selector>) {
   ...
} */

/*::cue-region :- The ::cue-region CSS pseudo-element matches WebVTT cues within a selected element. This can be used to style captions and other cues in media with VTT tracks.  */
/* Syntax:
::cue-region | ::cue-region(<selector>) {
   ... 
} */


/*Permitted properties:
background, background-attachment, background-clip, background-color, background-image, background-origin, background-position, background-repeat, background-size, color
font, font-family, font-size, font-stretch, font-style, font-variant, font-weight, line-height
opacity, outline, outline-color, outline-style, outline-width, ruby-position, text-combine-upright, text-decoration, text-decoration-color, text-decoration-line, text-decoration-style, text-decoration-thickness, text-shadow, visibility, white-space
*/