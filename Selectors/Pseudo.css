
/* Pseudo classes */

/* A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). */
/* Example- the pseudo-class :hover can be used to select a button when a user's pointer hovers over the button and this selected button can then be styled. */

/* A pseudo-class consists of a colon (:) followed by the pseudo-class name (e.g., :hover). */

/* Synrax 
        selectors:psuedo-classes{
            pporperty : value;
        } */

/* Functional pseudo-classes */
/*:is(): The :is() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list.  */
/* This is useful for writing large selectors in a more compact form. */

/* section h1, aside h1{
  font-size: 20px;
  color: red;
} */

/* .h{
  color: red;
} */

/*specificity 1  */
/* :is(section,aside){
  background-color: red;
} */

/* :is(section, aside) h1 {
    color: greenyellow;
} */


/* .box section h1,section h2,section h3,section h4, section h5, section h6, article h1, article h2, article h3, article h4, article h5 , article h6, aside h1, aside h2, aside h3, aside h4, aside h5, aside h6, nav h1, nav h2, nav h3, nav h3, nav h4, nav h5, nav h6{
    color:red;
  } */

/* which would be the equivalent of */



/* .box :is(section, article, aside, nav) :is(h1, h3, h5, h6) {
    color: blue;
} */

/* div p, div a{
    color: red;
  } */
/* .box1 :is(p, a) {
    background-color: black;
    color: white;
} */



/* .box2 section section p,
  aside article p,
  aside article a{
    color: green;
  }
   */

/* .box2 :is(section, aside) :is(section, article) :is(p, a:hover) {
    color: purple;
} */



/* .box3 a:is(:hover, :focus) {
    color: red;
} */


/*not work  */
/* .example-1 h3,
  .example-1 h4,
  .example-1 a,
  .example-1 .la{
    color: green;
    background-color: yellowgreen;
  } */

/* .example-1 :is(h3, h4, a, .la) {
    color: red;
} */

/*work  */
/* .example-1 h3,
.example-1 h4,
.example-1 a,
.example-1 .la {
    color: green;
} */


/* .card:hover .card-tittle,
  .card:hover button{
    background-color: red;
  }
  
  .card:hover :is(.card-tittle,button){
    background-color: red;
  } */


/*:were(): The :where() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list. other wise same in :is() pseudo classes*/
/* the specificity of :where() is always zero (0). */

/* :where(h3,h4,a){
    color: red;
  } */
/*specificity 0  */
/* :where(h3,h4,#ld){
    
  } */
/* .example-2 a {
    color: darkblue;
}

.example-2 :where(h3, h4, #ld) {
    color: red;
} */


/* :not():  represents elements that do not match a list of selectors. */
/* synatx:-  :not(all selectors) */
/* <p> elements that don't have a class `.fancy` */
/* p:not(.fancy){
  color: green;
} */

/* Elements that are not <p> elements */
/* body :not(p){
  text-decoration: underline;
} */

/* Elements that are not <div>s or `.fancy` */
/* body :not(div , .fancy){
  font-weight: 900;
  font-size: 25px;
}

body :not(div):not(.fancy){
  text-decoration: overline underline;
}

body :not(:is(div,.fancy)){
  text-transform: uppercase;
} */

/* Elements inside an <h2> that aren't a <span> with a class of `.foo` */
/* h2 :not(span.far){
  color: red;
} */

/* Class Selector on Nested Element */
/* .entry-A .entry-content :not(.intro){
  color: #45ff45;
} */

/* Class Selector w/out Nesting */
/* .entry-B :not(.intro){
  font-size: 15px;
} */

/* This demo uses the attribute as our simple selector */
/* .entry-C button:not([disabled]){
  font-size: 25px;
} */


/* Attribute Selector */
/* .entry-D a:not([href*="https://css-tricks"]){
  text-decoration: none;
  color: black;
  font-size: large;
} */


/* won't work because ::first-line is a pseudo element */
/* .entry-E p:not(::first-letter){
  color: red;
} */

/* nth-child Pseudo Class */
/* .entry-F p:not(:nth-child(2n+1)){
  color: red;
}

p:not(article *){
  color: gray;
  font-weight: 900;
} */
/* 

h2:not(:where(article *, section *)) {
  ... 
}

<article>
  <h2> No match! </h2>
</article>

<section>
  <h2> No Match! </h2>
</section>

<aside>
  <h2> Match! </h2>
</aside> */



/* :has():- This pseudo-class presents a way of selecting a parent element or a previous sibling element with respect to a reference element by taking a relative selector list as an argument. */
/* 
h2:has(span) {
  color: red;
}

div {
  border: 2px solid black;
  padding: 15px;
  margin: 10px;
}

div:has(h3, h2, p) {
  background-color: pink;
}

div:has(section h3) {
  font-weight: 900;
  font-size: 40px;
}

div:has(>h2) {
  background-color: black;
  color: white;
}

div:has(h5 + p) {
  background-color: aquamarine;
}

h5:has(+p) {
  color: red;
} */

/* div:not(:has(h3,h2)){
  background-color: blue;
} */

/* .testing:has(h1) li{
  color: red;
  list-style-type: none;
} */



/* empty pseudo classes */
.testing:has(*:empty) {
  color: red;
}

/* div:not(:has(*:empty)){
  color: red;
} */

/* button{
  opacity: 0;
} */

/* form:has(input[type="checkbox"]:checked){
  background-color: aqua;
} */


/* form:has(input[type="checkbox"]:checked) button{
  opacity: 1;
}

label:has(+ input[type="checkbox"]:checked){
  color: green;
}

label:has(:invalid){
  color: red;
} */


/* exampole first*/
/* * {
    box-sizing: border-box;
  }
  
  img {
    display: block;
    max-width: 100%;
  }
  

  body {
    font-size: 1.125rem;
    line-height: 1.6;
    padding: 3rem;
  
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    align-items: start;
  }
  
  .card {
    box-shadow: 0 0 1rem rgb(0 0 0 / 0.2);
  }
  
    
  .card__content {
    padding: 1rem;
  }

  .card:has(.media){
    display: grid;
    grid-template-columns: 150px 1fr;
  }
  
  .card:has(.icon){
    padding: 5px;
  }

.card:has(.icon) > .icon{
    margin: 5px;
  background-color: blue;
  } */


  .card:has(.card__content) .card__content{
/*     padding: 10px;
    color: red; */
  }

/* .card:has(.icon) .card__content :is(h2,p){
  padding: 0;
  margin: 0;
} */

/* :is(.card:has(.icon) .card__content
    ,.card:has(.media) .card__content
,.card:has(.card__content) .card__content) :is(h2,p){
  padding: 0;
  margin: 0;
} */


/* example second  */






/* example second*/
  /* body {
    font-family: system-ui;
    font-size: 1.5rem;
    padding: 2rem;
    background-color: hsl(200 50% 5%);
    color: hsl(200 10% 98%);
  }
  
  article {
    max-width: 50rem;
    margin-inline: auto;
  }
  
  article + article {
    border-block-start: 2px solid hsl(200 10% 20%);
    margin-block-start: 4rem;
    padding-block-start: 4rem;
  }
  
  .article__title {
    color: hsl(250 75% 80%);
    margin: 0;
  }
  
  .article__subtitle {
    margin: 0;
    font-size: 1.75rem;
    font-weight: 600;
    margin-block-end: 5rem;
  }

  .article__title:has(+ .article__subtitle){
    color: pink;
  }

  .article__title:not(:has(+ article__subtitle)){
    color: red;
    margin-block-end: 5rem;
  } */


  /* example third */
  /* body {
    padding: 2rem;
    background: hsl(200 50% 5%);
  }
  
  .image-gallery {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    max-width: 50rem;
    margin-inline: auto;
  }
  
  .image-gallery > img {
    width: 100%;
    aspect-ratio: 1 / 1;
    object-fit: cover;
    cursor: pointer;
  
    transition: scale 350ms ease, opacity 350ms linear;
  }


  .image-gallery:has(img:hover) img:not(:hover){
    scale: 0.7;  
    opacity: 0.3;  
  } */


/* 

  :root {
    color-scheme: dark;
  }
  
  body {
    margin: 3rem auto;
    max-width: 600px;
    font-family: sans-serif;
    min-height: 150vh;
    background: linear-gradient(
      120deg, 
      hsl(260 70% 20%), 
      hsl(0 70% 30%)
    );
    color: hsl(0 0% 100%);
    line-height: 1.5;
  }
  
  
  .notice {
    display: none;
    color: hsl(0, 70%, 10%);
    background: hsl(0, 70%, 70%, 0.8);
    padding: 1.5rem;
    margin: 2rem 2rem 1rem;
    border: 1px solid hsl(0, 100%, 70%);
    border-radius: 5px;
    line-height: 1.4;
    box-sizing: border-box;
  
  }

  h3 {
    margin: 0;
    color: hsl(0, 90%, 20%);
  }

  p {
    margin: 0;
  }
  
  @supports not selector(:has(*)) {
    .notice {
      display: block;
    }
  }
  
  h1 {
    margin: 2rem 2rem 1rem;
    line-height: 1.4;
  }
  
  p {
    margin-top: 0;
  }
  
  form {
    padding: 1.5rem 2rem;
    font-size: 1.2rem;
  }
  
  fieldset {
    padding: 2rem 3rem;
    border-radius: 5px;
    border-width: 3px;
  }
  
  legend {
    margin-left: -0.5rem;
    padding: 0 0.5rem;
  }
  
  label {
    display: block;
    margin-top: 1rem;
    margin-bottom: 1px;
    padding-bottom: 0.1rem;
    position: relative;
  }
  
  input,
  textarea {
    padding: 0.7rem 0.6rem 0.6rem;
    margin: 0;
    width: 20rem;
    border: 3px solid hsl(0 0% 90%);
    border-bottom-color: hsl(0 0% 50%);
    color-scheme: light;
  }
  
  textarea {
    height: 5rem;
    resize: none;
  }
  
  button {
    margin-top: 1rem;
    padding: 1.3rem 1.7rem;
    display: block;
  }
  
  .link {
    margin: 1.5rem 2rem;
    padding: 2rem 3rem 1.9rem;
    display: inline-block;
    font-size: 1.7rem;
    background-image: linear-gradient(120deg, hsl(260 70% 40%), hsl(0, 70%, 50%));
    color: hsl(0, 0%, 100%);
    border-radius: 1rem;
    transition: filter ease-in-out 0.2s;
    text-decoration: none;
  
  }

  .link:hover {
    filter: brightness(130%) contrast(1.3);
  }*/
  
   /* Demo Code */
  /* :invalid {
    border-bottom-color: hsl(0 100% 60%);
    border-left-color: hsl(0 100% 60%);
  }
  
  fieldset:invalid {
    border-color: hsl(0 100% 60%);
    border-width: 3px;
  }
  
  fieldset:invalid legend {
    color: hsl(0 100% 60%);
  }
  
  label:has(+ :invalid) {
    color: black;
  }
  
  label:has(+ :invalid)::after {
    content: '';
    position: absolute;
    width: 3rem;
    top: 100%;
    right: 100%;
    height: 1px;
    border: 2px solid hsl(0 100% 60%);
  } 

  label:has(+ :invalid)::before{
    content: "X";
    position: absolute;
    top: 30px;
    right: 100px;
    font-size: 30px;
    font-weight: 600;
    color: red;
  }  */


/* 
  :root {
    color-scheme: dark;
  }
  
  body {
    margin: 3rem 3rem;
    font-family: sans-serif;
    min-height: 150vh;
    background: linear-gradient(
      120deg, 
      hsl(260 70% 20%), 
      hsl(0 70% 30%)
    );
    color: hsl(0 0% 100%);
    line-height: 1.5;
  }
  
  h1 {
    margin: 3rem 0 2rem;
    line-height: 1.4;
  }
  
  p {
    margin-top: 0;
  }
  
  .notice {
    display: none;
    color: hsl(0, 70%, 10%);
    background: hsl(0, 70%, 70%, 0.8);
    padding: 1.5rem;
    margin: 2rem 0;
    border: 1px solid hsl(0, 100%, 70%);
    border-radius: 5px;
    line-height: 1.4;
    box-sizing: border-box;
  
  }

  h3 {
    margin: 0;
    color: hsl(0, 90%, 20%);
  }

  p {
    margin: 0;
  }
  
  @supports not selector(:has(*)) {
    .notice {
      display: block;
    }
  }
   */

/* 
  ul {
    margin: 0 auto;
    padding: 0;
    list-style: none;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 1rem;
  }
  
  li {
    margin: 0;
    padding: 0;
    display: block;
  }
  
  .link {
    margin-top: 2rem;
  }
  
  a {
    display: block;
    padding: 1.2rem 1.5rem 1.1rem;
    position: relative;
    color: hsl(0 0% 100%);
    text-decoration: none;
    background: linear-gradient(
      45deg, 
      hsl(280 80% 30%),
      hsl(310 85% 40%)
    );
    border-radius: 5px;
    border: 1px solid hsl(280 90% 50% / 0.5);
    transition: 0.4s all ease-in-out;
  
  }

  a::before {
    content: "";
    display: block;
    background: transparent;
    width: calc(100% + 2rem);
    height: calc(100% + 2rem);
    position: absolute;
    top: -1rem;
    left: -1rem;
  }
  

  ul:has(a:hover) a:not(:hover){
    filter: grayscale(0.7);
    color: hsl(0 0% 100% / 0.5);
  } */


/*   
:root:has(.notice) ul{
  color: lightcoral;
  background-color: red;
} */
  

/* // Page Style */
/* :root {
  color-scheme: dark;
}

body {
  margin: 3rem auto;
  max-width: 600px;
  font-family: sans-serif;
  min-height: 150vh;
  background: linear-gradient(
    120deg, 
    hsl(260 70% 20%),
    hsl(0 70% 30%)
  );
  color: hsl(0 0% 100%);
  line-height: 1.5;
}



h1 {
  margin: 3rem 0 2rem;
  line-height: 1.4;
}

p {
  margin-top: 0;
}

ul {
  margin: 2rem 0;
  padding: 0;
  width: auto;
  list-style: none;
}

li {
  margin: 0.5rem 0;
  padding: 0;
}

li a {
  border: 1px solid hsl(280 90% 50% / 0.5);
  border-radius: 5px;
  display: block;
  padding: 1.2rem 1.5rem 1.1rem;
  text-decoration: none;
  color: hsl(0 0% 100%);
  transition: all .2s ease-in-out;
  background: linear-gradient(
    45deg,
    hsl(280 80% 20%),
    hsl(310 85% 30%)
  );
  
}

li a:hover {
    filter: brightness(120%);
  }

.color-scheme-selector {
  background: hsl(200 100% 50% / 0.5);
  width: fit-content;
  padding: 1rem 1rem 0.9rem;
  border-radius: 5px;
}

.color-scheme {
  position: relative;
  top: 2px;
} */


/*Demo Code */
/* :root:has(.color-scheme:checked) {
  color-scheme: light;
  
} 

 :root:has(.color-scheme:checked) body {
  color: hsl(0, 0%, 0%);
  background: linear-gradient(
    120deg, 
    hsl(260 70% 85%), 
    hsl(0 70% 95%)
  );
} 

 :root:has(.color-scheme:checked) .color-scheme-selector {
  background: hsl(200 95% 90%);
  border: 1px solid hsl(200 85% 60%);
}

:root:has(.color-scheme:checked) li a {
  background: linear-gradient(
    45deg, 
    hsl(280 80% 80%), 
    hsl(310 85% 90%)
  );
  color: hsl(0 0% 0%);
  border: 1px solid hsl(280 90% 50% / 0.5);
} */


/* Tree-structural pseudo-classes */
/* These pseudo-classes relate to the location of an element within the document tree. */




/* :root :- the root element of a tree representing the document. In HTML, :root represents the <html> element and is identical to the selector html, except that its specificity is higher. */

/* Syntax: 
      :root {
          ......
          }
*/

/* Declaring global CSS varibles */
*{
  box-sizing: border-box;
}
:root{
 --main-color: rgb(160, 194, 96);
 --pane-padding: 12px 20px;
 --main-font: rgb(24, 23, 23);
}

/* use global varibles var() function */
/* .container{
  width: 100%;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
  gap: 20px;
}

.container .box{
  border: 2px solid black;
  background-color: var(--main-color);
}

.container .box img{
  display: block;
  height: 100px;
  width: 100px;
  border-radius: 50%;
  margin: 15px auto;
  object-fit: cover;
}
.container .box h5{
  text-align: center;
  font-size: 25px;
  margin: 10px 0;
  color: var(--main-font);
}
.container .box p{
  font-size: 15px;
  padding: 0 10px;
} */



/* :empty :- any element that has no children. Children can be either element nodes or text (including whitespace). Comments, processing instructions, and CSS content do not affect whether an element is considered empty. */
/* Syntax:
  :empty {
   ...
}  
*/

div:empty{
  background-color: blue;
  height: 10px;
  width: 15%;
}



/* :nth-child :- The :nth-child() CSS pseudo-class matches elements based on their position among a group of siblings. */

/* Syntax:
    :nth-child(<nth> [of <complex-selector-list>]?) {
     ... 
}
*/

/* Keyword values
odd - 1,3,,5,7,9....
even - 2,4,6,8.....
*/

/* Functional notation
An + b - A is an integer step size, B is an integer offset, n is all nonnegative integers, starting from 0.
*/

/* example selctor
tr:nth-child(odd) or tr:nth-child(2n+1) - 1,3,5,7,9...
tr:nth-child(even) or tr:nth-child(2n) - 2,4,6,8...
:nth-child(7) - represent sevent element
:nth-child(5n) - 5,10,15...
:nth-child(n+7) - 7,8,9,10...
:nth-child(3n+4) - 7,10,13...
:nth-child(-n+3) - 2,1,0,-1,-2
*/

/* 
table{
  width: 60%;
  border: 2px solid #6c6565;
  border-collapse: collapse;
  margin: 0 auto;

}
table thead{
  background-color:  hotpink;
}

table thead tr th{
  padding: 10px 0;
  font-size: 20px;
  font-weight: 800;
  font-family: 'Times New Roman', Times, serif;
}

table tr{
  border: 2px solid #6f6d6d;
  cursor: pointer;
  width: 100%;
}


table :is(th,td){
  padding: 8px;
  text-align: center;
}

tfoot{
  background-color: hotpink;
  padding: 10px 0;
  font-size: 20px;
  font-weight: 800;
  font-family: 'Times New Roman', Times, serif;
}


tbody tr:nth-child(even){
  background-color: #8585db;
  
}

tbody tr:nth-child(2n){
  background-color: #8585db;
  
}

tbody tr:nth-child(2n):hover{
  background-color: #a8a8e1;
}


tbody tr:nth-child(odd){
  background-color: #85db8f;
  
}

tbody tr:nth-child(2n+1){
  background-color: #85db8f;
  
}

tbody tr:nth-child(odd):hover{
  background-color: #aedbb5;
} */


/* .one li:nth-child(2){
  color: red;
} */

/* .one :nth-child(2) :nth-child(3){
  color: hotpink;
} */

/* :nth-child(an + b of <selector>) */
/* :nth-child(pattern of .picture) {
}: not work */


/* :first-child :- The :first-child CSS pseudo-class represents the first element among a group of sibling elements. */
/* Syntax: 
    :first-child {
     ... 
}*/

/* ul li:first-child{
  color: red;
} */

/* :last-child :- The :last-child CSS pseudo-class represents the last element among a group of sibling elements. */
/* Syntax:
  :last-child {
   ...
} */

/* ol li:last-child{
  color: blue;
} */


/* nth-last-child :- The :nth-last-child() CSS pseudo-class matches elements based on their position among a group of siblings, counting from the end. other same in :nth-child*/
/* Syntax:
  :nth-last-child(<nth> [of <complex-selector-list>]?) {
     ... 
}*/
/* .one :nth-child(3) li:nth-last-child(2n){
  color: blue;
} */


/* :nth-child and :nth-of-type */

/* li:nth-child(even){
  color: red;
}

li:nth-of-type(even){
color: green !important;
}


p:nth-child(2){
  color: red !important;
}

p:nth-of-type(2){
  color: green;
} */

/* same but seclect element different
nth-child  -  nth-of-type
nth-last-child  -  last-of-type
first-child  -  first-of-type
last-child  -  last-of-type
onlu-child   -  only-of-type
*/



/* User action pseudo-classes */
/* These pseudo-classes require some interaction by the user in order for them to apply, such as holding a mouse pointer over an element. */


/* :hover :-  the user interacts with an element with a pointing device, but does not necessarily activate it. It is generally triggered when the user hovers over an element with the cursor (mouse pointer). */

/* To style links appropriately, put the :hover rule after the :link and :visited rules but before the :active one, as defined by the LVHA-order: :link — :visited — :hover — :active. */

/* Syntax:
    :hover {
       ... 
}
*/


/* ul{
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0;
} */
/* 

ul li{
  width: 100px;
  list-style: none;
  margin-right: 5px;
  cursor: pointer;  
  text-align: center;
} */


/* a{
  display: inline-block;
  width: 100%;
  padding: 8px 3px;
  border-radius: 5px;
  font-family: 'Alkatra', cursive;
  font-size: 20px;
  letter-spacing: 1px;
  text-decoration: none;
  position: relative;
}

a::before{
  content: "";
  position: absolute;
  bottom: 13px;
  left: 10px;
  width: 0px;
  height: 3px;
  background-color: black;
}

a:hover::before{
  content: "";
  transition: 0.5s;
  position: absolute;
  width: 60px;
  height: 3px;
  background-color: #4b0aff;
} */


/* 
ul li:nth-child(1) a{
  background-color: #b97e7e;
  color: #363030;
  transition: .5s;
}
 
ul li:nth-child(1):hover a{
  background-color: #390404;
  color: blue;
  transition: .0.5s;
}


ul li:nth-child(2) a{
  background-color: #b97e7e;
  color: #363030;
  transition: .5s;
}
 
ul li:nth-child(2):hover a{
  background-color: #390404;
  color: blue;
  transition: .0.5s;
}

ul li:nth-child(3) a{
  background-color: #b97e7e;
  color: #363030;
  transition: .5s;
}
 
ul li:nth-child(3):hover a{
  background-color: #390404;
  color: blue;
  transition: .0.5s;
}

ul li:nth-child(4) a{
  background-color: #b97e7e;
  color: #363030;
  transition: .5s;
}
 
ul li:nth-child(4):hover a{
  background-color: #390404;
  color: blue;
  transition: .0.5s;
}
 */
/* 
ul li:nth-child(2) a{
  background-color: #ac73b0;
  color: #363030;
}

ul li:nth-child(2):hover a{
  background-color: #360439;
  color: whitesmoke;
  transition: .0.5s;
}


ul li:nth-child(3) a{
  background-color: #7677b7;
  color: #363030;
}
ul li:nth-child(3):hover a{
  background-color: #32335d;
  color: whitesmoke;
  transform: .0.5s;
}


ul li:nth-child(4) a{
  background-color: #85b4c1;
  color: #363030;
}
ul li:nth-child(4):hover a{
  background-color: #32545d;
  color: white;
  transform: .0.5s;
}
 */
/* 
div[class] {
  display:inline-block;
  font-size:40px;
  font-family:sans-serif;
  margin:25px;
  padding-bottom:5px;
  cursor:pointer;
} */
/* div[class]:nth-child(odd) {
  color:darkblue;
} */
/* :root{
  --main-color:red;
  --d:0;
} */

body {
  /*   text-align:center; */
  /*   background-color: var(--color,red); */
  /*   background-color: var(--main-color); */
  }
  
  /* .basic-0 {
    background: 
       linear-gradient(0.25turn, #3f87a6, #ebf8e1, #f69d3c) 
        0% 100%/var(--d,20px) 3px 
        no-repeat;
    transition: 0.5s;
  }
  
  .basic-0:hover {
    --d:100%
  } */
  
  /*background-color
    background-poistion: 25%-> l-to-r | 50%-> t-to-b /(than) 100%(width) | 50%(height)*/
  
  /* .test{
    background: linear-gradient(#e66465, #9198e5) 0% 100%/var(--d,30px) 3px no-repeat;
  
  } */
  
  /* .test{
    background: linear-gradient(0.25turn, #3f87a6, #ebf8e1, #f69d3c) bottom/var(--d,0) 4px no-repeat;
    transition: 0.5s;
  }
  .test:hover{
    --d: 100%;
  } */
  


/* :active :- When using a mouse, "activation" typically starts when the user presses down the primary mouse button.  */

/* Syntax:
    selector:active{
      ......
    }
*/
/* aside a{
  display: block;
  margin-bottom: 10px;
  text-decoration: none;
} */

/* aside a:nth-child(1):active{
  color: green;
}
aside a:nth-child(2):active{
  color: #9a3c45;
}
aside a:nth-child(3):active{
  color: #6a770e;
}
aside a:nth-child(4):active{
  color: #be8f0e;
} */


/*To style links appropriately, put the :hover rule after the :link and :visited rules but before the :active one, as defined by the LVHA-order: :link — :visited — :hover — :active.  */

/* aside a{
  color: #c03578;
}
aside a:link{
  color: blue;
}
aside a:visited{
  color: green;
}
aside a:hover{
  background-color: yellow;
}
aside a:active{
  color: red;
} */

/* Active form elements */
/* form :active{
  color: red;
}
form button{
  background-color: white;
  padding: 10px;
} */




/*:focus :-  It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's Tab key. The element will be focused by the script (element.focus()) and possibly the mouse (or pointer), but not the keyboard. */

/*Syntax:
  selector:focus{
        .......
        }
  }
*/
/* 
section{
  background-color: #b6c8ad;
  padding: 20px;
}
form div{
  width: 100%;
  display: inline;
}

form input{
  outline: none;
}

form label{
  margin-right: 30px;
}

.inst1{
  cursor: not-allowed;
} */

/*chorm  */
/* input[type=number]::-webkit-inner-spin-button, 
input[type=number]::-webkit-outer-spin-button { 
  display: none;
} */

/* input:focus{
  border: 2px solid green;
  background-color: yellow;
} */
/* select:focus{
  border: 3px dotted green;
  background-color: #f0f09e;
} */

/* firfox */
/*  input[type=number] {
        -moz-appearance: textfield;
    } */
/* 
section{
  display: grid;
  grid-template-columns: repeat(5,1fr);
  column-gap: 25px;
} */


/*:focus-within :-  Triggered when the user clicks or taps on any of its child element or itself, div’s children receive focus that this selector will get applied.*/
/*Syntax:
    :focus-within{
        .......
    
}
*/
/* div:focus-within{
  background-color: green;
  color: red;
} */
/* label{
  color: red;
}
label:focus-within{
  color: green;
} */


/*focus-visible  :- The :focus-visible pseudo-class applies while an element matches the :focus pseudo-class and the UA (User Agent) determines via heuristics that the focus should be made evident on the element. (Many browsers show a "focus ring" by default in this case.)*/

/*Syntax:
    :focus-visible{
      .......
    }
*/
/* input:focus-visible{
  color: #1629b6;
  background-color: yellow;
} */



/* Location pseudo-classes */
/* :link :-  an element that has not yet been visited. It matches every unvisited <a> or <area> element that has an href attribute. */
/*Syntx: 
    :link {
     ... 
        }  
*/
/*notes: By default, most browsers apply a special color value to visited links. Thus, the links in this example will probably have special font colors only before you visit them. (After that, you'll need to clear your browser history to see them again.)  */

/* :link{
  color:green;
} */
/* dono same hi h */
a:link{
  color:green;
}

/*:any-link :-  an element that acts as the source anchor of a hyperlink, independent of whether it has been visited. In other words, it matches every <a> or <area> element that has an href attribute.  */
/*Syntax: 
  :any-link {
       ...
        }
*/
/*notes:  If the term source anchor lost you, that’s a fancy name for the href attribute on the HTML elements <a>, <link> and <area>. Thus, it matches all elements that match :link or :visited. */

:any-link{
  color: green;
}

/* a:any-link{
  color: red;
} */


/*:visited :-  the link has been visited by the user. For privacy reasons, the styles that can be modified using this selector are very limited. The :visited pseudo-class applies only <a> and <area> elements that have an href attribute. */
/*Syntax:
    :visited {
        ...
        }  
*/

/*use property 
color, background-color, border-color, border-bottom-color, border-left-color, border-right-color, border-top-color, column-rule-color, outline-color, text-decoration-color, and text-emphasis-color.
The <link> element is never matched by :visited.

*/

/* a:visited{
  color: red;
} */

/*:target :-   The :target CSS pseudo-class represents a unique element (the target element) with an id matching the URL's fragment.*/

/* Selects an element with an ID matching the current URL's fragment */
/* :target {
  border: 2px solid black;
} */

p:target{
/*   background-color: yellow; */
}
/* 
p:target::before{
  content: "►";
  margin-right: 10px;
}
p:target i{
  color: red;
}


.lightbox{
  display: none;
}

.lightbox:target{
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 100px;
  left: 0;
  width: 100%;
  height: 100;
}

.lightbox p{
  background-color: hotpink;
  padding: 20px;
  width: 50%;
  margin: 0 auto;
  border-radius: 2px;
  position: relative;
}

.lightbox .close{
  position: relative;
  display: block;
}

.lightbox .close::after{
  content: "×";
  position: absolute;
  top: -53px;
  right: -728px;
  width: 2rem;
  height: 2rem;
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 35px;
  background-color: black;
  border-radius: 50%;
  z-index: 1;
}

.lightbox .close::before{
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  cursor: default;
} */




/* Input pseudo-classes */
/* These pseudo-classes relate to form elements, and enable selecting elements based on HTML attributes and the state that the field is in before and after interaction. */

body{
  margin: 0;
  padding: 0;
}

h2{
  text-align: right;
    margin-right: 70px;
    text-decoration: underline;
    color: #95323b;
    font-size: 22px;
    font-weight: 900;
    cursor: pointer;
  }
form{
    /* width: 100%; */
    background-color: #eee7e7;
    /* height: 100vh; */
    margin: 0 auto;
    padding: 30px;
  }

label{
 display: block; 
}
table{
  width: 100%;
  border-collapse: 20px
  ;
}

td{
  width: 130px;
}

tr td:nth-child(1){
  font-size: 1em;
  color: #181716;
  font-weight: 800;
}

#students{
  width: 500px;
  padding: 10px;
}
input{
  border-radius: 5px;
  outline: none;
  border: 1px solid gray;
  margin-top: 5px;
}

textarea{
  outline: none;
  width: 500px;
  height: 150px;
  margin-top: 10px;
  border-radius: 5px;
}

button{
  padding: 10px;
  width: 150px;
  background-color: green;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
}
.address{
  vertical-align: 5px;
  margin-top: 10px;
}


/* :autofill :- The :autofill CSS pseudo-class matches when an <input> element has its value autofilled by the browser. The class stops matching if the user edits the field. */
/*notes:  the :autofill pseudo-class to change the border of a text field that has been autocompleted by the browser  */
/*Syntax:
  :autofill {
     ...
  }
*/


/*:enabled :-  An element is enabled if it can be activated (selected, clicked on, typed into, etc.) or accept focus.The element also has a disabled state, in which it can't be activated or accept focus  */
/*Syntax: 
  :enabled{
     ......
  }
*/

input:enabled{
  background-color: #abceab;
  color: white;
}


/*:disabled :- An element is disabled if it can't be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has an enabled state, in which it can be activated or accept focus.  */
/*Syntax:
    :disabled {
   ... 
    }
*/
input:disabled{
  background-color: gray;
  border: 2px solid black;
}


/*:read-only :- The :read-only CSS pseudo-class represents an element (such as input or textarea) that is not editable by the user.*/
/*Suntax: 
    :read-only {
   ... 
  }
*/
input:read-only{
    border: 2px solid darkorange;
    border-radius: 5px;
}

/*:read-write :- The :read-write CSS pseudo-class represents an element (such as input or textarea) that is editable by the user. */
/*Syntax:
    :read-write {
       ...
    }
*/
input:read-write{
  border: 2px dotted red;
}

/*:placeholder-shown :- The :placeholder-shown CSS pseudo-class represents any <input> or <textarea> element that is currently displaying placeholder text.*/
/*Syntax: 
      :placeholder-shown {
       ...
    }
*/
input:placeholder-shown{
  color: #fb0909;
  font-size: 15px;
}

/*:default :- The :default CSS pseudo-class selects form elements that are the default in a group of related elements. */

/*  it may match the <button>, <input type="checkbox">, <input type="radio">, and <option> elements: */

/*1. A default option element is the first one with the selected attribute, or the first enabled option in DOM order. multiple <select>s can have more than one selected option, so all will match :default.

2. <input type="checkbox"> and <input type="radio"> match if they have the checked attribute.

3. <button> matches if it is a <form>'s default submission button: the first <button> in DOM order that belongs to the form. This also applies to <input> types that submit forms, like image or submit.  */

/*Syntax: 
      :default {
         ...
      }
*/


input:default{
  box-shadow: 0 0 2px 1px coral;
}

input:default + span{
  color: green;
}


/*:checked :- The :checked CSS pseudo-class selector represents any radio (<input type="radio">), checkbox (<input type="checkbox">), or option (<option> in a <select>) element that is checked or toggled to an on state. */
/*Syntax:
        :checked {
             ... 
          }
*/

input:checked{
  border: none;
    outline: 2px solid deeppink;
}


/*:indeterminate :- The :indeterminate CSS pseudo-class represents any form element whose state is indeterminate, such as checkboxes which have their HTML indeterminate attribute set to true, radio buttons which are members of a group in which all radio buttons are unchecked, and indeterminate <progress> elements.  */
/*Syntax:
  Selects any <input> whose state is indeterminate 
      input:indeterminate {
          background: lime;
      }
*/


/*:blank :- The :blank CSS pseudo-class selects empty user input elements (e.g. <input> or <textarea>).*/

/*Syntax:
    :blank {
       ...
    }
*/


/*:valid :- The :valid CSS pseudo-class represents any <input> or other <form> element whose contents validate successfully. This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly.*/
/*Syntax:
        :valid {
            ... 
          }
*/


/*:invalid :- The :invalid CSS pseudo-class represents any <form>, <fieldset>, <input> or other <form> element whose contents fail to validate.*/

/*Syntax:
    :invalid {
        ...
      }
*/


/*:in-range :- The :in-range CSS pseudo-class represents an <input> element whose current value is within the range limits specified by the min and max attributes.  */

/*Syntax:
    :in-range {
        ...
      }
*/


/*:out-of-range :- The :out-of-range CSS pseudo-class represents an <input> element whose current value is outside the range limits specified by the min and max attributes.  */

/*Syntax:
    :out-of-range {
       ... 
    }
*/


/*:required :- The :required CSS pseudo-class represents any <input>, <select>, or <textarea> element that has the required attribute set on it.*/

/*Syntax:
      :required {
      ... 
  }
*/


/*:optional :- The :optional CSS pseudo-class represents any <input>, <select>, or <textarea> element that does not have the required attribute set on it. */

/*Syntax:
    :optional {
       ... 
    }
*/

/*example  */
/* 
div{
  position: absolute;
  top: 50%;
  left: 50%;
}

input{
  appearance: none;
  
}

label{
  width: 80px;
  height: 40px;
  background-color: blue;
  border-radius: 50px;
  position: relative;
}

label::before{
  content: "";
  position: absolute;
  top: 5px;
  left: 5px;
  width: 30px;
  height: 30px;
  background-color: red;
  border-radius: 50%;
}

input:checked + label{
  background-color: green;
  transition: 0.5s;
}

input:checked + label::before{
  transform: translateX(40px);
  transition: 0.5s;
  background-color: white;
}

:root:has(input:checked){
background-color: yellow;  
} */







