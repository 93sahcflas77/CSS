
/* Pseudo classes */

/* A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). */
/* Example- the pseudo-class :hover can be used to select a button when a user's pointer hovers over the button and this selected button can then be styled. */

/* A pseudo-class consists of a colon (:) followed by the pseudo-class name (e.g., :hover). */

/* Synrax 
        selectors:psuedo-classes{
            pporperty : value;
        } */

/* Functional pseudo-classes */
/*:is(): The :is() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list.  */
/* This is useful for writing large selectors in a more compact form. */

/* section h1, aside h1{
  font-size: 20px;
  color: red;
} */

/* .h{
  color: red;
} */

/*specificity 1  */
/* :is(section,aside){
  background-color: red;
} */

/* :is(section, aside) h1 {
    color: greenyellow;
} */


/* .box section h1,section h2,section h3,section h4, section h5, section h6, article h1, article h2, article h3, article h4, article h5 , article h6, aside h1, aside h2, aside h3, aside h4, aside h5, aside h6, nav h1, nav h2, nav h3, nav h3, nav h4, nav h5, nav h6{
    color:red;
  } */

/* which would be the equivalent of */



/* .box :is(section, article, aside, nav) :is(h1, h3, h5, h6) {
    color: blue;
} */

/* div p, div a{
    color: red;
  } */
/* .box1 :is(p, a) {
    background-color: black;
    color: white;
} */



/* .box2 section section p,
  aside article p,
  aside article a{
    color: green;
  }
   */

/* .box2 :is(section, aside) :is(section, article) :is(p, a:hover) {
    color: purple;
} */



/* .box3 a:is(:hover, :focus) {
    color: red;
} */


/*not work  */
/* .example-1 h3,
  .example-1 h4,
  .example-1 a,
  .example-1 .la{
    color: green;
    background-color: yellowgreen;
  } */

/* .example-1 :is(h3, h4, a, .la) {
    color: red;
} */

/*work  */
/* .example-1 h3,
.example-1 h4,
.example-1 a,
.example-1 .la {
    color: green;
} */


/* .card:hover .card-tittle,
  .card:hover button{
    background-color: red;
  }
  
  .card:hover :is(.card-tittle,button){
    background-color: red;
  } */


/*:were(): The :where() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list. other wise same in :is() pseudo classes*/
/* the specificity of :where() is always zero (0). */

/* :where(h3,h4,a){
    color: red;
  } */
/*specificity 0  */
/* :where(h3,h4,#ld){
    
  } */
/* .example-2 a {
    color: darkblue;
}

.example-2 :where(h3, h4, #ld) {
    color: red;
} */


/* :not():  represents elements that do not match a list of selectors. */
/* synatx:-  :not(all selectors) */
/* <p> elements that don't have a class `.fancy` */
/* p:not(.fancy){
  color: green;
} */

/* Elements that are not <p> elements */
/* body :not(p){
  text-decoration: underline;
} */

/* Elements that are not <div>s or `.fancy` */
/* body :not(div , .fancy){
  font-weight: 900;
  font-size: 25px;
}

body :not(div):not(.fancy){
  text-decoration: overline underline;
}

body :not(:is(div,.fancy)){
  text-transform: uppercase;
} */

/* Elements inside an <h2> that aren't a <span> with a class of `.foo` */
/* h2 :not(span.far){
  color: red;
} */

/* Class Selector on Nested Element */
/* .entry-A .entry-content :not(.intro){
  color: #45ff45;
} */

/* Class Selector w/out Nesting */
/* .entry-B :not(.intro){
  font-size: 15px;
} */

/* This demo uses the attribute as our simple selector */
/* .entry-C button:not([disabled]){
  font-size: 25px;
} */


/* Attribute Selector */
/* .entry-D a:not([href*="https://css-tricks"]){
  text-decoration: none;
  color: black;
  font-size: large;
} */


/* won't work because ::first-line is a pseudo element */
/* .entry-E p:not(::first-letter){
  color: red;
} */

/* nth-child Pseudo Class */
/* .entry-F p:not(:nth-child(2n+1)){
  color: red;
}

p:not(article *){
  color: gray;
  font-weight: 900;
} */
/* 

h2:not(:where(article *, section *)) {
  ... 
}

<article>
  <h2> No match! </h2>
</article>

<section>
  <h2> No Match! </h2>
</section>

<aside>
  <h2> Match! </h2>
</aside> */



/* :has():- This pseudo-class presents a way of selecting a parent element or a previous sibling element with respect to a reference element by taking a relative selector list as an argument. */
/* 
h2:has(span) {
  color: red;
}

div {
  border: 2px solid black;
  padding: 15px;
  margin: 10px;
}

div:has(h3, h2, p) {
  background-color: pink;
}

div:has(section h3) {
  font-weight: 900;
  font-size: 40px;
}

div:has(>h2) {
  background-color: black;
  color: white;
}

div:has(h5 + p) {
  background-color: aquamarine;
}

h5:has(+p) {
  color: red;
} */

/* div:not(:has(h3,h2)){
  background-color: blue;
} */

/* .testing:has(h1) li{
  color: red;
  list-style-type: none;
} */



/* empty pseudo classes */
.testing:has(*:empty) {
  color: red;
}

/* div:not(:has(*:empty)){
  color: red;
} */

/* button{
  opacity: 0;
} */

/* form:has(input[type="checkbox"]:checked){
  background-color: aqua;
} */


/* form:has(input[type="checkbox"]:checked) button{
  opacity: 1;
}

label:has(+ input[type="checkbox"]:checked){
  color: green;
}

label:has(:invalid){
  color: red;
} */


/* exampole first*/
/* * {
    box-sizing: border-box;
  }
  
  img {
    display: block;
    max-width: 100%;
  }
  

  body {
    font-size: 1.125rem;
    line-height: 1.6;
    padding: 3rem;
  
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    align-items: start;
  }
  
  .card {
    box-shadow: 0 0 1rem rgb(0 0 0 / 0.2);
  }
  
    
  .card__content {
    padding: 1rem;
  }

  .card:has(.media){
    display: grid;
    grid-template-columns: 150px 1fr;
  }
  
  .card:has(.icon){
    padding: 5px;
  }

.card:has(.icon) > .icon{
    margin: 5px;
  background-color: blue;
  } */


  .card:has(.card__content) .card__content{
/*     padding: 10px;
    color: red; */
  }

/* .card:has(.icon) .card__content :is(h2,p){
  padding: 0;
  margin: 0;
} */

/* :is(.card:has(.icon) .card__content
    ,.card:has(.media) .card__content
,.card:has(.card__content) .card__content) :is(h2,p){
  padding: 0;
  margin: 0;
} */


/* example second  */






/* example second*/
  /* body {
    font-family: system-ui;
    font-size: 1.5rem;
    padding: 2rem;
    background-color: hsl(200 50% 5%);
    color: hsl(200 10% 98%);
  }
  
  article {
    max-width: 50rem;
    margin-inline: auto;
  }
  
  article + article {
    border-block-start: 2px solid hsl(200 10% 20%);
    margin-block-start: 4rem;
    padding-block-start: 4rem;
  }
  
  .article__title {
    color: hsl(250 75% 80%);
    margin: 0;
  }
  
  .article__subtitle {
    margin: 0;
    font-size: 1.75rem;
    font-weight: 600;
    margin-block-end: 5rem;
  }

  .article__title:has(+ .article__subtitle){
    color: pink;
  }

  .article__title:not(:has(+ article__subtitle)){
    color: red;
    margin-block-end: 5rem;
  } */


  /* example third */
  /* body {
    padding: 2rem;
    background: hsl(200 50% 5%);
  }
  
  .image-gallery {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    max-width: 50rem;
    margin-inline: auto;
  }
  
  .image-gallery > img {
    width: 100%;
    aspect-ratio: 1 / 1;
    object-fit: cover;
    cursor: pointer;
  
    transition: scale 350ms ease, opacity 350ms linear;
  }


  .image-gallery:has(img:hover) img:not(:hover){
    scale: 0.7;  
    opacity: 0.3;  
  } */


/* 

  :root {
    color-scheme: dark;
  }
  
  body {
    margin: 3rem auto;
    max-width: 600px;
    font-family: sans-serif;
    min-height: 150vh;
    background: linear-gradient(
      120deg, 
      hsl(260 70% 20%), 
      hsl(0 70% 30%)
    );
    color: hsl(0 0% 100%);
    line-height: 1.5;
  }
  
  
  .notice {
    display: none;
    color: hsl(0, 70%, 10%);
    background: hsl(0, 70%, 70%, 0.8);
    padding: 1.5rem;
    margin: 2rem 2rem 1rem;
    border: 1px solid hsl(0, 100%, 70%);
    border-radius: 5px;
    line-height: 1.4;
    box-sizing: border-box;
  
  }

  h3 {
    margin: 0;
    color: hsl(0, 90%, 20%);
  }

  p {
    margin: 0;
  }
  
  @supports not selector(:has(*)) {
    .notice {
      display: block;
    }
  }
  
  h1 {
    margin: 2rem 2rem 1rem;
    line-height: 1.4;
  }
  
  p {
    margin-top: 0;
  }
  
  form {
    padding: 1.5rem 2rem;
    font-size: 1.2rem;
  }
  
  fieldset {
    padding: 2rem 3rem;
    border-radius: 5px;
    border-width: 3px;
  }
  
  legend {
    margin-left: -0.5rem;
    padding: 0 0.5rem;
  }
  
  label {
    display: block;
    margin-top: 1rem;
    margin-bottom: 1px;
    padding-bottom: 0.1rem;
    position: relative;
  }
  
  input,
  textarea {
    padding: 0.7rem 0.6rem 0.6rem;
    margin: 0;
    width: 20rem;
    border: 3px solid hsl(0 0% 90%);
    border-bottom-color: hsl(0 0% 50%);
    color-scheme: light;
  }
  
  textarea {
    height: 5rem;
    resize: none;
  }
  
  button {
    margin-top: 1rem;
    padding: 1.3rem 1.7rem;
    display: block;
  }
  
  .link {
    margin: 1.5rem 2rem;
    padding: 2rem 3rem 1.9rem;
    display: inline-block;
    font-size: 1.7rem;
    background-image: linear-gradient(120deg, hsl(260 70% 40%), hsl(0, 70%, 50%));
    color: hsl(0, 0%, 100%);
    border-radius: 1rem;
    transition: filter ease-in-out 0.2s;
    text-decoration: none;
  
  }

  .link:hover {
    filter: brightness(130%) contrast(1.3);
  }*/
  
   /* Demo Code */
  /* :invalid {
    border-bottom-color: hsl(0 100% 60%);
    border-left-color: hsl(0 100% 60%);
  }
  
  fieldset:invalid {
    border-color: hsl(0 100% 60%);
    border-width: 3px;
  }
  
  fieldset:invalid legend {
    color: hsl(0 100% 60%);
  }
  
  label:has(+ :invalid) {
    color: black;
  }
  
  label:has(+ :invalid)::after {
    content: '';
    position: absolute;
    width: 3rem;
    top: 100%;
    right: 100%;
    height: 1px;
    border: 2px solid hsl(0 100% 60%);
  } 

  label:has(+ :invalid)::before{
    content: "X";
    position: absolute;
    top: 30px;
    right: 100px;
    font-size: 30px;
    font-weight: 600;
    color: red;
  }  */


/* 
  :root {
    color-scheme: dark;
  }
  
  body {
    margin: 3rem 3rem;
    font-family: sans-serif;
    min-height: 150vh;
    background: linear-gradient(
      120deg, 
      hsl(260 70% 20%), 
      hsl(0 70% 30%)
    );
    color: hsl(0 0% 100%);
    line-height: 1.5;
  }
  
  h1 {
    margin: 3rem 0 2rem;
    line-height: 1.4;
  }
  
  p {
    margin-top: 0;
  }
  
  .notice {
    display: none;
    color: hsl(0, 70%, 10%);
    background: hsl(0, 70%, 70%, 0.8);
    padding: 1.5rem;
    margin: 2rem 0;
    border: 1px solid hsl(0, 100%, 70%);
    border-radius: 5px;
    line-height: 1.4;
    box-sizing: border-box;
  
  }

  h3 {
    margin: 0;
    color: hsl(0, 90%, 20%);
  }

  p {
    margin: 0;
  }
  
  @supports not selector(:has(*)) {
    .notice {
      display: block;
    }
  }
   */

/* 
  ul {
    margin: 0 auto;
    padding: 0;
    list-style: none;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 1rem;
  }
  
  li {
    margin: 0;
    padding: 0;
    display: block;
  }
  
  .link {
    margin-top: 2rem;
  }
  
  a {
    display: block;
    padding: 1.2rem 1.5rem 1.1rem;
    position: relative;
    color: hsl(0 0% 100%);
    text-decoration: none;
    background: linear-gradient(
      45deg, 
      hsl(280 80% 30%),
      hsl(310 85% 40%)
    );
    border-radius: 5px;
    border: 1px solid hsl(280 90% 50% / 0.5);
    transition: 0.4s all ease-in-out;
  
  }

  a::before {
    content: "";
    display: block;
    background: transparent;
    width: calc(100% + 2rem);
    height: calc(100% + 2rem);
    position: absolute;
    top: -1rem;
    left: -1rem;
  }
  

  ul:has(a:hover) a:not(:hover){
    filter: grayscale(0.7);
    color: hsl(0 0% 100% / 0.5);
  } */


/*   
:root:has(.notice) ul{
  color: lightcoral;
  background-color: red;
} */
  

/* // Page Style */
/* :root {
  color-scheme: dark;
}

body {
  margin: 3rem auto;
  max-width: 600px;
  font-family: sans-serif;
  min-height: 150vh;
  background: linear-gradient(
    120deg, 
    hsl(260 70% 20%),
    hsl(0 70% 30%)
  );
  color: hsl(0 0% 100%);
  line-height: 1.5;
}



h1 {
  margin: 3rem 0 2rem;
  line-height: 1.4;
}

p {
  margin-top: 0;
}

ul {
  margin: 2rem 0;
  padding: 0;
  width: auto;
  list-style: none;
}

li {
  margin: 0.5rem 0;
  padding: 0;
}

li a {
  border: 1px solid hsl(280 90% 50% / 0.5);
  border-radius: 5px;
  display: block;
  padding: 1.2rem 1.5rem 1.1rem;
  text-decoration: none;
  color: hsl(0 0% 100%);
  transition: all .2s ease-in-out;
  background: linear-gradient(
    45deg,
    hsl(280 80% 20%),
    hsl(310 85% 30%)
  );
  
}

li a:hover {
    filter: brightness(120%);
  }

.color-scheme-selector {
  background: hsl(200 100% 50% / 0.5);
  width: fit-content;
  padding: 1rem 1rem 0.9rem;
  border-radius: 5px;
}

.color-scheme {
  position: relative;
  top: 2px;
} */


/*Demo Code */
/* :root:has(.color-scheme:checked) {
  color-scheme: light;
  
} 

 :root:has(.color-scheme:checked) body {
  color: hsl(0, 0%, 0%);
  background: linear-gradient(
    120deg, 
    hsl(260 70% 85%), 
    hsl(0 70% 95%)
  );
} 

 :root:has(.color-scheme:checked) .color-scheme-selector {
  background: hsl(200 95% 90%);
  border: 1px solid hsl(200 85% 60%);
}

:root:has(.color-scheme:checked) li a {
  background: linear-gradient(
    45deg, 
    hsl(280 80% 80%), 
    hsl(310 85% 90%)
  );
  color: hsl(0 0% 0%);
  border: 1px solid hsl(280 90% 50% / 0.5);
} */


/* Tree-structural pseudo-classes */
/* These pseudo-classes relate to the location of an element within the document tree. */




/* :root :- the root element of a tree representing the document. In HTML, :root represents the <html> element and is identical to the selector html, except that its specificity is higher. */

/* Syntax: 
      :root {
          ......
          }
*/

/* Declaring global CSS varibles */
*{
  box-sizing: border-box;
}
:root{
 --main-color: rgb(160, 194, 96);
 --pane-padding: 12px 20px;
 --main-font: rgb(24, 23, 23);
}

/* use global varibles var() function */
/* .container{
  width: 100%;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
  gap: 20px;
}

.container .box{
  border: 2px solid black;
  background-color: var(--main-color);
}

.container .box img{
  display: block;
  height: 100px;
  width: 100px;
  border-radius: 50%;
  margin: 15px auto;
  object-fit: cover;
}
.container .box h5{
  text-align: center;
  font-size: 25px;
  margin: 10px 0;
  color: var(--main-font);
}
.container .box p{
  font-size: 15px;
  padding: 0 10px;
} */



/* :empty :- any element that has no children. Children can be either element nodes or text (including whitespace). Comments, processing instructions, and CSS content do not affect whether an element is considered empty. */
/* Syntax:
  :empty {
   ...
}  
*/

div:empty{
  background-color: blue;
  height: 10px;
  width: 15%;
}



/* :nth-child :- The :nth-child() CSS pseudo-class matches elements based on their position among a group of siblings. */

/* Syntax:
    :nth-child(<nth> [of <complex-selector-list>]?) {
     ... 
}
*/

/* Keyword values
odd - 1,3,,5,7,9....
even - 2,4,6,8.....
*/

/* Functional notation
An + b - A is an integer step size, B is an integer offset, n is all nonnegative integers, starting from 0.
*/

/* example selctor
tr:nth-child(odd) or tr:nth-child(2n+1) - 1,3,5,7,9...
tr:nth-child(even) or tr:nth-child(2n) - 2,4,6,8...
:nth-child(7) - represent sevent element
:nth-child(5n) - 5,10,15...
:nth-child(n+7) - 7,8,9,10...
:nth-child(3n+4) - 7,10,13...
:nth-child(-n+3) - 2,1,0,-1,-2
*/


table{
  width: 60%;
  border: 2px solid #6c6565;
  border-collapse: collapse;
  margin: 0 auto;

}
table thead{
  background-color:  hotpink;
}

table thead tr th{
  padding: 10px 0;
  font-size: 20px;
  font-weight: 800;
  font-family: 'Times New Roman', Times, serif;
}

table tr{
  border: 2px solid #6f6d6d;
  cursor: pointer;
  width: 100%;
}


table :is(th,td){
  padding: 8px;
  text-align: center;
}

tfoot{
  background-color: hotpink;
  padding: 10px 0;
  font-size: 20px;
  font-weight: 800;
  font-family: 'Times New Roman', Times, serif;
}


tbody tr:nth-child(even){
  background-color: #8585db;
  
}

tbody tr:nth-child(2n){
  background-color: #8585db;
  
}

tbody tr:nth-child(2n):hover{
  background-color: #a8a8e1;
}


tbody tr:nth-child(odd){
  background-color: #85db8f;
  
}

tbody tr:nth-child(2n+1){
  background-color: #85db8f;
  
}

tbody tr:nth-child(odd):hover{
  background-color: #aedbb5;
}


.one li:nth-child(2){
  color: red;
}

.one :nth-child(2) :nth-child(3){
  color: hotpink;
}

/* :nth-child(an + b of <selector>) */
/* :nth-child(pattern of .picture) {
}: not work */


/* :first-child :- The :first-child CSS pseudo-class represents the first element among a group of sibling elements. */
/* Syntax: 
    :first-child {
     ... 
}*/

ul li:first-child{
  color: red;
}

/* :last-child :- The :last-child CSS pseudo-class represents the last element among a group of sibling elements. */
/* Syntax:
  :last-child {
   ...
} */

ol li:last-child{
  color: blue;
}


/* nth-last-child :- The :nth-last-child() CSS pseudo-class matches elements based on their position among a group of siblings, counting from the end. other same in :nth-child*/
/* Syntax:
  :nth-last-child(<nth> [of <complex-selector-list>]?) {
     ... 
}*/
.one :nth-child(3) li:nth-last-child(2n){
  color: blue;
}


/* :nth-child and :nth-of-type */
