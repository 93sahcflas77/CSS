/* Basic concepts of scroll snap
The properties in the CSS scroll snap module enable you to define how scrolling snaps to specific points as a user scrolls through a document. */


/* Key properties for CSS scroll snap:
You can do this by ensuring that the scroll container has a defined size and that it has overflow enabled. */


/* The scroll container by using the following two key properties: */

/* scroll-snap-type: Using this property, you can define whether or not the scrollable viewport can be snapped to, whether snapping is required or optional, and the axis on which the snapping should occur. */

/* scroll-snap-align: This property is set on every child of the scroll container and you can use it to define each child's snap position or lack thereof. */

/* scroll-snap-stop: This property ensures that a child is snapped to during scrolling and not passed over. */

/* scroll-padding: This property can be set on the scroll container to create a snapping offset. */

/* scroll-margin: This property can be set on child elements that are snapped to during scrolling to create an outset from the defined box. */



.scroll{
    display: flex;
    gap: 20px;
}

.scroller{
    height: 300px;
    border: 2px solid black;
    width: 25%;
    overflow-y: scroll;
}

.scroller section{
    height: 300px;
    padding: 5px;
}

.scroller section h1{
    margin: 0;
    padding: 0;
}
.scroller section:nth-child(1){
    background-color: red;
}
.scroller section:nth-child(2){
    background-color: yellow;
}
.scroller section:nth-child(3){
    background-color: green;
}
.scroller section:nth-child(4){
    background-color: aqua;
}


/* Using scroll-snap-type */
/* The scroll-snap-type property needs to know the direction in which scroll snapping happens.
This can be x, y, or the logical mappings block or inline. You can also use the keyword both to have scroll snapping work along both axes. */

/* You can also pass in the keywords mandatory or proximity.

The mandatory keyword tells the browser whether the content has to snap to a certain point, no matter where the scroll is. 
The proximity keyword means that the content may snap to the point, but does not have to.

Using mandatory creates a very consistent scrolling experience — you know the browser will always snap to each defined point. 

The proximity value only snaps child elements to a position when it is close by, with the browsers determining the exact distance.*/

/* Syntax:
        scroll-snap-type: x | y | both | block | inline | x mandatory | x proximity | both mandatory; */

.scroller-container{
    height: 300px;
    border: 2px solid black;
    width: 25%;

    overflow-x: scroll;

    scroll-snap-type: y mandatory;
}


/* Using scroll-snap-aling:
The scroll-snap-align property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container).

The two values specify the snapping alignment in the block axis and inline axis, respectively.
The second value defaults to the same value.

The valid values for the scroll-snap-align property include start, end, center, and none.

Syntax:
        scroll-snap-align: start | end | center | none | start end; */


.scroller-container section{
    height: 350px;
    padding: 5px;

    scroll-snap-align: start;
}

.scroller-container section h1{
    margin: 0;
    padding: 0;
}
.scroller-container section:nth-child(1){
    background-color: red;
}
.scroller-container section:nth-child(2){
    background-color: yellow;
}
.scroller-container section:nth-child(3){
    background-color: green;
}
.scroller-container section:nth-child(4){
    background-color: aqua;
}

/* If the content doesn't overflow its container, there is nothing to scroll. */

.scroll1{
    margin: 20px auto;
    width: 300px;
    height: 300px;
    border: 2px solid black;
    border-radius: 5px;
    display: flex;
    gap: 20px;
    overflow-x: scroll;

    scroll-snap-type: x mandatory;
}

.scroll1 .scroll-child{
    flex: 1 0 200px;

    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 35px;
    font-weight: 900;
    color: white;

    scroll-snap-align: center;
    scroll-snap-align: end;
}

.scroll1 .scroll-1:nth-child(1){
    background-color: red;
}
.scroll1 .scroll-2:nth-child(2){
    background-color: yellow;
}
.scroll1 .scroll-3:nth-child(3){
    background-color: green;
}
.scroll1 .scroll-4:nth-child(4){
    background-color: aqua;
}
.scroll1 .scroll-5:nth-child(5){
    background-color: blue;
}

/* Using scroll-padding */
/* The scroll-padding shorthand property sets scroll padding on all sides of an element at once, much like the padding property does for padding on an element.

When using start or end, if you do not want the content to snap right to the edge of the scroll container, or if you want the snap position to be slightly offset from center when using center, use the scroll-padding property or its equivalent longhand values to add some padding. */

/* In the example below, scroll-padding is set to 40px. When the content snaps to the start of the second and third sections, scrolling stops 40 pixels away from the start of the section. */

/* Syntax:
        scroll-padding: 10px | 10px 10px | 10px 10px 10px | 10px 10px 10px 10px; */

.scroll1{
    scroll-padding: 40px;
}

/* This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars), or to put more breathing room between a targeted element and the edges of the scrollport.

Constituent properties
This property is a shorthand for the following CSS properties:

scroll-padding-bottom
scroll-padding-left
scroll-padding-right
scroll-padding-top */


/* scroll-padding
scroll-padding-left
scroll-padding-right
scroll-padding-top
scroll-padding-bottom
scroll-padding-block
scroll-padding-block-start
scroll-padding-block-end
scroll-padding-inline
scroll-padding-inline-start
scroll-paddong-inline-end */



/* Using scroll-margin */
/* The scroll-margin property or the longhand scroll margin values can be set on child elements, defining an outset from the defined box. 
The scroll-margin shorthand property sets all of the scroll margins of an element at once, assigning values much like the margin property does for margins of an element.scroll

Syntax:
        scroll-margin: 10px | 10px 10px | 10px 10px 10px | 10px 10px 10px 10px; */

/* Constituent properties
This property is a shorthand for the following CSS properties:

scroll-margin-bottom
scroll-margin-left
scroll-margin-right
scroll-margin-top */

/* scroll-margin-left
scroll-margin-right
scroll-margin-top
scroll-margin-bottom
scroll-margin-block
scroll-margin-block-start
scroll-margin-block-end
scroll-margin-inline
scroll-margin-inline-start
scroll-margin-inline-end */

.scroller-container section{
    scroll-margin: 30px;
}

/* Using scroll-snap-stop */
/* The scroll-snap-stop CSS property defines whether or not the scroll container is allowed to "pass over" possible snap positions.

The effect of this property can be noticed on devices with a touchpad. Try to scroll through all items with a single swing. Value 'normal' should pass through all pages, while 'always' will stop at the second page.

Syntax:
        scroll-snap-stop: normal | always; */

.scroll1{
    scroll-snap-stop: always;
}


/* example */
.scroll-grid{
    width: 940px;
    height: 520px;
    display: grid;
    grid-template-columns: repeat(5, 300px);
    grid-auto-rows: 250px;
    gap: 20px;

    overflow: scroll;
    scroll-snap-type: both mandatory;
}

.scroll-grid > div{
    background-color: hotpink;
    scroll-snap-align: start;
}


/* ::-webkit-scrollbar */
/* The ::-webkit-scrollbar CSS pseudo-element affects the style of an element's scrollbar when it has overflow:scroll; set.

Note: If overflow:scroll; is not set, no scrollbar is displayed.

Note: ::-webkit-scrollbar is only available in Blink- and WebKit-based browsers (e.g., Chrome, Edge, Opera, Safari, all browsers on iOS, and others). 

Note: A standardized method of styling scrollbars is available with scrollbar-color and scrollbar-width, but is currently only supported in Firefox.

CSS Scrollbar Selectors
You can use the following pseudo-elements to customize various parts of the scrollbar for WebKit browsers:

::-webkit-scrollbar — the entire scrollbar.
::-webkit-scrollbar-button — the buttons on the scrollbar (arrows pointing upwards and downwards that scroll one line at a time).
::-webkit-scrollbar:horizontal{} — the horizontal scrollbar.
::-webkit-scrollbar-thumb — the draggable scrolling handle.
::-webkit-scrollbar-track — the track (progress bar) of the scrollbar, where there is a gray bar on top of a white bar.
::-webkit-scrollbar-track-piece — the part of the track (progress bar) not covered by the handle.
::-webkit-scrollbar:vertical{} — the vertical scrollbar.
::-webkit-scrollbar-corner — the bottom corner of the scrollbar, where both horizontal and vertical scrollbars meet. This is often the bottom-right corner of the browser window.
::-webkit-resizer — the draggable resizing handle that appears at the bottom corner of some elements. */

/* Most using  */
/* ::-webkit-scrollbar
::-webkit-scrollbar-thumb
::-webkit-scrollbar-track */
