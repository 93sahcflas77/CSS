/* filter */
/* The filter CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.

Several functions, such as blur() and contrast(), are available to help you achieve predefined effects.

Syntax: 
        ___filter-function value___
        filter: none | blue(5px) | brightness(0.4) | contrast(200%) | drop-shadow(16px 16px 20px blue) | grayscale(50%) | hue-rotate(90deg) | invert(75%) | opacity(25%) | saturate(30%) | sepia(60%);

        ___URL___
        filter: url('filters.svg#filter-id');

        ___Multiple value___
        filter: contrast(100%) brightness(0.4) | drop-shadow(3px 3px red) sepia(60%) drop-shadow(-3px -3px blue); */

.filter {
    width: 300px;
    height: 300px;
    margin: 10px auto;
}


.filter img {
    width: 100%;
    height: 100%;
    border-radius: 5px;
}

/* Function
When the filter property values contains multiple functions, the filters are applied in order. */

/* blur():  The blur() CSS function applies a Gaussian blur to the input image. Its result is a <filter-function>.

Syntax: 
        filter: blur(radius);

        radius: length value (px, rem, em, %) */

.filter img {
    /* filter: blur(5px); */
}

/* brightness(): The brightness() CSS <filter-function> applies a linear multiplier value on an element or an input image, making the image appear brighter or darker.

Syntax: 
        filter: brightness(amount);

        amount: Brightness specified as a <number> or a <percentage>. A value less than 100% darkens the input image or element, while a value over 100% brightens it. A value of 0% creates a completely black image or element, while a value of 100% leaves the input unchanged. The default value, when nothing is specified, is 1. */

.filter img {
    /* filter: brightness(1) */
    /* filter: brightness(2); */
    /* filter: brightness(20%); */
}

/* contrast(): The contrast() CSS function adjusts the contrast of the input image. Its result is a <filter-function>.

Syntax: 
        filter: contrast(amount);

        amount: The contrast of the result, specified as a <number> or a <percentage>. A value under 100% decreases the contrast, while a value over 100% increases it. A value of 0 or 0% will create an image that is completely gray, while a value of 1 or 100% leaves the input unchanged. Negative values are not allowed. The initial value for interpolation is 1. */

.filter img {
    /* filter: contrast(7%); */
}

/* drop-shadow(): The drop-shadow() CSS function applies a drop shadow effect to the input image. Its result is a <filter-function>. */

/* A drop shadow is effectively a blurred, offset version of the input image's alpha mask, drawn in a specific color and composited below the image.

Note: This function is somewhat similar to the box-shadow property. The box-shadow property creates a rectangular shadow behind an element's entire box, while the drop-shadow() filter function creates a shadow that conforms to the shape (alpha channel) of the image itself.

Syntax: 
        ____Two length value____
        filter: drop-shadow(lenght  length);

        ____Three length value____
        filter: drop-shadow(lenght  length  lemgth);

        ____Two length value and a color____
        filter: drop-shadow(length  length  red);

        ____Three length value and a color_____
        filter: drop-shadow(length  length  length  red);

        ____The order of color and length values can be change____
        filter: drop-shadow(red  0.5rem  0.5rem 1rem); */

.filter img{
    /* filter: drop-shadow(18px 18px gray); */
    /* filter: drop-shadow(gray 18px 18px); */
    /* filter: drop-shadow(gray 18px 18px 18px); */
}


/* grayscale(): The grayscale() CSS function converts the input image to grayscale. Its result is a <filter-function>.

Syntax: 
        filter: grayscale(amount);

        amount: Amount of the input image that is converted to grayscale. It is specified as a <number> or a <percentage>. A value of 100% changes the input completely to grayscale, while a value of 0% leaves the input unchanged. Values between 0% and 100% have linear multipliers on the effect. If the grayscale() filter is present with no parameter, the default value is 1. The initial value used for interpolation is 0. */

.filter img{
    /* filter: grayscale(0.9); */
    /* filter: grayscale(90%); */
}

/* hue-rotate(): The hue-rotate() CSS function rotates the hue of an element and its contents. Its result is a <filter-function>.

Syntax: 
        filter: hue-rotate(90deg) | hue-rotate(2.9turn) | hue-rotate(3.456red);

The hue-rotate() function applies a color rotation to the elements on which it is applied. */

.filter img{
    /* filter: hue-rotate(120deg); */
}


/* invert(): The invert() CSS function inverts the color samples in the input image. Its result is a <filter-function>.

Syntax: 
        filter: invert(amount);

        amount: The amount of the conversion, specified as a <number> or a <percentage>. A value of 100% is completely inverted, while a value of 0% leaves the input unchanged. Values between 0% and 100% are linear multipliers on the effect. The initial value for interpolation is 0. */

.filter img{
    /* filter: invert(70%); */
}

/* opacity(): The opacity() CSS function applies transparency to the samples in the input image. Its result is a <filter-function>.

Note: This function is similar to the more established opacity property. The difference is that with filters, some browsers provide hardware acceleration for better performance.

Syntax: 
        filter: opacity(amount);

        amount: The amount of the conversion, specified as a <number> or a <percentage>. A value of 0% is completely transparent, while a value of 100% leaves the input unchanged. Values between 0% and 100% are linear multipliers on the effect. The initial value for interpolation is 1. */

.filter img{
    /* filter: opacity(0); */
}

/* saturate(): The saturate() CSS function super-saturates or desaturates the input image. Its result is a <filter-function>.

Syntax: 
        filter: saturate(amount);

        amount: The amount of the conversion, specified as a <number> or a <percentage>. A value under 100% desaturates the image, while a value over 100% super-saturates it. A value of 0% is completely unsaturated, while a value of 100% leaves the input unchanged. The initial value for interpolation is 1. */

.filter img{
    /* filter: saturate(.4); */
    /* filter: saturate(200%); */
}

/* sepia(): The sepia() CSS function converts the input image to sepia, giving it a warmer, more yellow/brown appearance. Its result is a <filter-function>.

Syntax: 
        filter: sepia(amount);

        amount: The amount of the conversion, specified as a <number> or a <percentage>. A value of 100% is completely sepia, while a value of 0% leaves the input unchanged. Values between 0% and 100% are linear multipliers on the effect. The initial value for interpolation is 0. */

.filter img{
    /* filter: sepia(.65); */
    filter: sepia(100%);
}




