/* css grid layout */
/* The CSS grid layout module excels at dividing a page into major regions or defining the relationship in terms of size, position, and layer, between parts of a control built from HTML primitives. */
/* Like tables, grid layout enables an author to align elements into columns and rows. For example, a grid container's child elements could position themselves so they actually overlap and layer, similar to CSS positioned elements. */


.wrapper{
    margin: 10px auto;
    text-align: center;
    max-width: 700px;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
    grid-auto-rows: minmax(100px , auto);
    border: 2px solid black;
    padding: 15px;
  }
  
  .wrapper > div{
    background-color: honeydew;
    border: 2px dotted black;
  }

  
/* Layering items with z-index */
/* Grid items can occupy the same cell, and in this case we can use the z-index property to control the order in which overlapping items stack. */
/* Controlling the order
We can control the order in which items stack up by using the z-index property - just like positioned items. If we give box2 a lower z-index than box1 it will display below box1 in the stack. */

.one{
    grid-column: 1 / 3;
    grid-row: 1;
    z-index: 1;
  }
  .Two{
    grid-column: 2 / 4;
    grid-row: 1 / 3;
    z-index: 2;
  }
  .Three{
    grid-column: 1 / 2;
    grid-row: 2 / 5;
  }
  .Four{
    grid-column: 3 / 4;
  }


  /* grid all 
____________properties________
display
grid-template-columns
grid-template-rows
grid-template-areas
grid-template
grid-auto-columns
grid-auto-rows
grid-auto-flow
grid
grid-row-start
grid-column-start
grid-row-end
grid-column-end
grid-row
grid-column
grid-area
row-gap
column-gap
gap

______________function_________
repeat()
minmax()
fit-content()
*/