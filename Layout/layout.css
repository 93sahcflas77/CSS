/* Introduction to CSS layout */

/* CSS page layout techniques allow us to take elements contained in a web page and control where they're positioned relative to the following factors: their default position in normal layout flow, the other elements around them, their parent container, and the main viewport/window. 

1. Normal flow
2. The display property
3. Flexbox
4. Grid
5. Floats
6. Positioning
7. Table layout
8. Multiple-column layout */


/* ------------- Normal flow ----------------- */

/* Inline elements behave differently. They don't appear on new lines; instead, they all sit on the same line along with any adjacent (or wrapped) text content as long as there is space for them to do so inside the width of the parent block level element. If there isn't space, then the overflowing content will move down to a new line.

If two vertically adjacent elements both have a margin set on them and their margins touch, the larger of the two margins remains and the smaller one disappears. This is known as margin collapsing. Collapsing margins is only relevant in the vertical direction. */


/* Example */
/* p{
    border: 1px solid red;
    padding: 15px;
    margin: 10px;
    background-color: hotpink;
}
span{
    margin: 10px;
    border: 1px solid black;
    background-color: white;
} */



/* ---------------------------------------- Float --------------------------------------------- */
/* The float property became one of the most commonly used tools for creating multiple column layouts on webpages.

The float property was introduced to allow web developers to implement layouts involving an image floating inside a column of text, with the text wrapping around the left or right of it. The kind of thing you might get in a newspaper layout. */
/* body{
    width: 900px;
    margin: 10px auto;
} */

/* .box{
    width: 160px;
    height: 170px;
    border: 1px solid black;
    border-radius: 5px;
    background-color: aqua;

    display: flex;
    align-items: center;
    justify-content: center;

    float: left;
    margin-right: 30px;
    margin-top: 20px;
    margin-left: 20px;
    
} */

/* p{
    font-size: 1.2rem;
} */


/* Visualizing the float */
/* While we can add a margin to the float to push the text away, we can't add a margin to the text to move it away from the float. This is because a floated element is taken out of normal flow and the boxes of the following items actually run behind the float. You can see this by making some changes to your example. */

/* Add a class of special to the first paragraph of text */

.special {
  background-color: rgb(230, 226, 20);
  padding: 20px;
}

/* The line boxes of our following element have been shortened so the text runs around the float, but due to the float being removed from normal flow the box around the paragraph still remains full width. */




/* Clearing floats */
/* We've seen that a float is removed from normal flow and that other elements will display beside it. If we want to stop the following element from moving up, we need to clear it; this is achieved with the clear property. */

/* The clear property accepts the following values:
1. left: Clear items floated to the left.
2. right: Clear items floated to the right.
3. both: Clear any floated items, left or right. */

/* add a class of cleared to the second paragraph below the floated item.  */

.cleared {
  clear: left;
}


/* Clearing boxes wrapped around a float 
You now know how to clear something following a floated element, but let's see what happens if you have a tall float and a short paragraph, with a box wrapped around both elements. */

/* The problem
Change your document so that the first paragraph and the floated box are jointly wrapped with a <div>, which has a class of wrapper. */

/* Soluction */
/* display: flow-root (To solve this problem is to use the value flow-root of the display property. This exists only to create a BFC without using hacks â€” there will be no unintended consequences when you use it. Remove overflow: auto from your .wrapper rule and add display: flow-root and the box will clear.) */

.wrapper {
  display: flow-root;
}


/* *{
    box-sizing: border-box;
}

body{
    background-color: rgb(160, 148, 148);
    width: 980px;
    width: 100%;
    margin: 10px auto;
} */


.wrapper {
  padding-right: 20px;
}

.col {
  float: left;
  width: 40px;
  /* height: 500px; */
  background-color: hotpink;
  margin-left: 20px;
  margin-bottom: 20px;

  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 5px;
  padding: 50px;
}

.row {
  clear: both;
}

.col.span2 {
  width: 200px;
}

.col.span1 {
  width: 200px;
}

.col.span4 {
  width: 300px;
}

.col.span5 {
  width: 400px;
}

.col.span6 {
  width: 120px;
}

.col.span7 {
  width: 200px;
}

.col.span8 {
  width: 520px;
}

.col.span9 {
  width: 180px;
}

.col.span10 {
  width: 340px;
}


/* .col.span2{ width: 20.83%;   }
.col.span1{  width: 14.49%;  }  
.col.span4{  width: 21.7%;  }
.col.span5{ width: 28.98%;    }
.col.span6{  width: 8.69%;  }
.col.span7{  width: 14.49%;  }
.col.span8{  width: 37.68%;  }
.col.span9{ width: 13.04%;   }
.col.span10{  width: 24.63%;  } */



/* Float property */
/* The float CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).

Syntax: 
            float: none | left | right; */

/* Example */

/* .container{
    border: 1px solid black;
    padding: 15px;
    height: 160px;
}

div{
    width: 45px;
    height: 150px;
    margin-right: 10px;

    display: flex;
    align-items: center;
    justify-content: center;
}

.left{
    background-color: hotpink;
    float: left;
}

.right{
    background-color: blue;
    float: right;
} */




/* Multiple-column layout: 
The multiple-column layout specification provides you with a method for laying content out in columns, as you might see in a newspaper. 

A three-column layout: We enable multicol by using one of two properties: column-count or column-width.

1. column-count: The column-count property takes a number as its value and creates that number of columns.
        selector{
            column-count: unit;
        }

2. column-width: Setting column-width takes a width of column
        selector{
            column-width: unit;
        } */

.column {
  column-count: auto;
  column-width: 300px;
}


/* Styling the columns: You have two opportunities to change the way that columns display

1. Changing the size of the gap between columns using the column-gap.
2. Adding a rule between columns with column-rule.

Now add a rule between the columns with column-rule. In a similar way to the border property that you encountered in previous lessons, column-rule is a shorthand for column-rule-color, column-rule-style, and column-rule-width, and accepts the same values as border.

        selector{
            column-count: unit;
            column-width: unit;
            column-gap: unit;
            column-rules: unit style color;
        }*/

/* .column{
    column-gap: 30px;
    column-rule: 2px solid red;
} */


/* Spanning columns: To cause an element to span all the columns, specify the value of all for the column-span property.

Note: It isn't possible to cause an element to span just some columns. The property can only have the values of none (which is the default) or all.*/

/* h2{
    column-span: all;
    text-align: center;
} */

/* Columns and fragmentation:

Fragmented boxes:  this breaking will happen in places that lead to a poor reading experience.

Setting break-inside: This specification gives us properties to control the breaking of content in multicol and in paged media. For example, by adding the property break-inside with a value of avoid to the rules for .card. This is the container of the heading and text, so we don't want it fragmented.*/

.column1 {
  column-width: 250px;
  /* column-gap: 15px; */
}

.card {
  break-inside: avoid;
  border: 2px solid black;
  background: green;
  padding: 10px;
  margin: 10px;
}

/*columns: The columns CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.

Constituent properties
1. column-count
2. column-width

        Syntax:
                _____Column width_____
                columns: 18em;

                ____Column count____
                columns: auto unit;

                _____Both column width and count___
                columns: 2 auto | auto unit | auto auto; */

/* Example */

.container {
  margin-top: 20px;
  display: grid;
  grid-template-columns: 2fr 1fr;
}

.container .box {
  margin: 0 auto;
  width: 90%;
  column-count: 2;
  column-gap: 20px;
  column-rule: 3px dotted black;
}

.container .box1 {
  border-left: 3px solid black;
  margin-left: 5px;
  padding: 15px;
}

.all-span {
  column-span: all;
  text-align: center;
  font-size: 45px;
  font-weight: 900;
  text-transform: lowercase;
  color: #804242;
  font-style: italic;
}

img {
  margin: 10px;
  padding: 10px;
  width: 160px;
}

span {
  display: block;
}



/* Flexbox:
Flexbox is a one-dimensional layout method for arranging items in rows or columns. 
Items flex (expand) to fill additional space or shrink to fit into smaller spaces.


Why flexbox:
For a long time, the only reliable cross-browser compatible tools available for creating CSS layouts were features like floats and positioning. These work, but in some ways they're also limiting and frustrating.

The following simple layout designs are either difficult or impossible to achieve with such tools in any kind of convenient, flexible way:
1. Vertically centering a block of content inside its parent.
2. Making all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available.
3. Making all columns in a multiple-column layout adopt the same height even if they contain a different amount of content.

    A flex container and its children to become flex items.
    We have our multiple column layout with equal-sized columns, and the columns are all the same height. */

body {
  background-color: #8a7b7b;
}

h2 {
  margin: 20px 0;
  text-align: center;
  font-size: 20px;
  font-weight: 900;
  letter-spacing: 1px;
  text-transform: uppercase;
  color: white;
}

h2+div {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;

}

figure {
  margin: 2px;
  padding: 5px;
  background-color: #656161;
  border-radius: 8px;
}

.flex-item {
  width: 40px;
  height: 30px;
  background-color: #e2657a;
  margin: 10px;
  border-radius: 8px;

  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 16px;
  color: white;
  font-weight: 800;
}

figcaption {
  text-align: center;
  font-size: 18px;
  font-weight: 800;
  text-transform: lowercase;
  color: white;
}

/*The flex model:
When elements are laid out as flex items, they are laid out along two axes:

->  The main axis is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.) The start and end of this axis are called the main start and main end.
->  The cross axis is the axis running perpendicular to the direction the flex items are laid out in. The start and end of this axis are called the cross start and cross end.
->  The parent element that has display: flex set on it (the <section> in our example) is called the flex container.
-> The items laid out as flexible boxes inside the flex container are called flex items (the <article> elements in our example).*/


/*Columns or rows:
Flexbox provides a property called flex-direction that specifies which direction the main axis. By default this is set to row.

        flex-direction: row | column;

    Note: You can also lay out flex items in a reverse direction using the row-reverse and column-reverse values.*/



/*Wrapping:
One issue that arises when you have a fixed width or height in your layout is that eventually your flexbox children will overflow their container, breaking the layout. 

you can fix this is to add flex-wrap propertycontent: 
        flex-wwrap: wrap;
        flex: 200px;

We now have multiple rows. Any overflow is moved down to the next line.  The flex: 200px declaration set on the articles means that each will be at least 200px wide. */



/*flex-flow shorthand:
A shorthand exists for flex-direction and flex-wrap: flex-flow. 



Flexible sizing of flex items:
we can control what proportion of space flex items take up compared to the other flex items.

        selector{
            flex: 1;
        }

        selector:nth-child(2){
            flex: 2;
        }

    There are now four proportion units available in total (since 1 + 1 + 2 = 4).  The first two flex items have one unit each, so they each take 1/4 of the available space. The third one has two units, so it takes up 2/4 of the available space (or one-half).

You can also specify a minimum size value within the flex value.

        selector{
            flex: 1;
        }

        selector:nth-child(2){
            flex: 2;
        }*/



/*flex: shorthand versus longhand
flex is a shorthand property that can specify up to three different values:

1. The unitless proportion value we discussed above. This can be specified separately using the flex-grow longhand property.
2. A second unitless proportion value, flex-shrink, which comes into play when the flex items are overflowing their container. This value specifies how much an item will shrink in order to prevent overflow. This is quite an advanced flexbox feature and we won't be covering it any further in this article.
3. The minimum size value we discussed above. This can be specified separately using the flex-basis longhand value.*/



/*Horizontal and vertical alignment:
You can also use flexbox features to align flex items along the main or cross axis. using justify-content and aling-content

    align-items controls where the flex items sit on the cross axis.

        ->  By default, the value is stretch, which stretches all flex items to fill the parent in the direction of the cross axis. If the parent doesn't have a fixed height in the cross axis direction, then all flex items will become as tall as the tallest flex item. This is how our first example had columns of equal height by default.
        ->  The center value that we used in our above code causes the items to maintain their intrinsic dimensions, but be centered along the cross axis. This is why our current example's buttons are centered vertically.
        ->  You can also have values like flex-start and flex-end, which will align all items at the start and end of the cross axis respectively. See align-items for the full details.

    You can override the align-items behavior for individual flex items by applying the align-self property to them.

    justify-content controls where the flex items sit on the main axis.

        -> The default value is flex-start, which makes all the items sit at the start of the main axis.
        -> You can use flex-end to make them sit at the end.
        -> center is also a value for justify-content. It'll make the flex items sit in the center of the main axis.
        -> The value we've used above, space-around, is useful â€” it distributes all the items evenly along the main axis with a bit of space left at either end.
        -> There is another value, space-between, which is very similar to space-around except that it doesn't leave any space at either end.

    The justify-items property is ignored in flexbox layouts.*/



/*Ordering flex items:
Flexbox also has a feature for changing the layout order of flex items without affecting the source order.
            orde: 1;

         -> By default, all flex items have an order value of 0.
         -> Flex items with higher specified order values will appear later in the display order than items with lower order values.
         -> Flex items with the same order value will appear in their source order. So if you have four items whose order values have been set as 2, 1, 1, and 0 respectively, their display order would be 4th, 2nd, 3rd, then 1st.
         -> The 3rd item appears after the 2nd because it has the same order value and is after it in the source order.


    You can set negative order values to make items appear earlier than items whose value is 0.
            order: -1;*/



.box .figure1 .flex {
  display: flex;
}

.box .figure2 .flex {
  display: inline-flex;
}

/* flex container property */

/* flex-direction: 
The flex-direction CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).

Syntax:
        flex-direction: row | row-reverse | column | column-reverse;

  row: The main-start and main-end points are the same as the content direction.
  row-reverse: Behaves the same as row but the main-start and main-end points are opposite to the content direction.
  column: The main-start and main-end points are the same as the before and after points of the writing-mode.
  column-reverse: Behaves the same as column but the main-start and main-end are opposite to the content direction. */

.box1 figure .flex {
  display: flex;
}

.box1 .figure1 .flex {
  flex-direction: row;
}

.box1 .figure2 .flex {
  flex-direction: row-reverse;
}

.box1 .figure3 .flex {
  flex-direction: column;
}

.box1 .figure4 .flex {
  flex-direction: column-reverse;
}


/*flex-wrap: 
The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.

Syntax: 
        flex-wrap: nowrap | wrap | wrap-reverse;

  nowrap: The flex items are laid out in a single line which may cause the flex container to                   overflow. The cross-start is either equivalent to start or before depending on the flex-            direction value. 
  wrap: The flex items break into multiple lines.
  wrap-reverse: Behaves the same as wrap but cross-start and cross-end are permuted.*/

.box2 figure .flex {
  display: flex;
}

.box2 figure {
  width: 20% !important;
}

.box2 .figure1 .flex {
  flex-wrap: nowrap;
}

.box2 .figure2 .flex {
  flex-wrap: wrap;
}

.box2 .figure3 .flex {
  flex-wrap: wrap-reverse;
}

/*flex-flow: 
The flex-flow CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.

Constituent properties
1. flex-direction
2. flex-wrap

Syntax: 
        flex-flow: row | row-reverse | column | column-reverse | nowrap | wrap | wrap-reverse | row         nowrap | column wrap | column-reverse wrap-reverse; */


/* .flex-container{
    flex-flow: row nowrap;
    flex-flow: row  wrap;
} */


/* justify-content:
The CSS justify-content property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.

The interactive example below demonstrates some of the values using Grid Layout.

Syntax: 
        justify-content: center | start | end | flex-start | flex-end | left | right | normal |             space-between | space-around | space-evenly | stretch;

  center:  Pack items around the center.
  start:  Pack items from the start.
  end: Pack items from the end.
  flex-start: Pack flex items from the start.
  flex-end: Pack flex items from the end.
  left: Pack items from the left.
  right: Pack items from the right.

  ____Baseline alignment: justify-content does not take baseline values.______

  ______Distributed alignment_____
  space-between:  Distribute items evenly The first item is flush with the start, the last is flush                   with the end 
  space-around: Distribute items evenly Items have a half-size space on either end.
  space-evenly: Distribute items evenly Items have equal space around them.
  stretch: Distribute items evenly Stretch 'auto'-sized items to fit the container. */

.box3 figure .flex {
  display: flex;
}

.box3 figure {
  width: 90%;
}

.box3 .figure1 .flex {
  justify-content: flex-start;
}

.box3 .figure2 .flex {
  justify-content: flex-end;
}

.box3 .figure3 .flex {
  justify-content: center;
}

.box3 .figure4 .flex {
  justify-content: space-around;
}

.box3 .figure5 .flex {
  justify-content: space-between;
}

.box3 .figure6 .flex {
  justify-content: space-evenly;
}

/* align-content:
The CSS align-content property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.

The interactive example below uses Grid Layout to demonstrate some of the values of this property.
This property has no effect on single line flex containers (i.e. ones with flex-wrap: nowrap).

Syntax: 
        align-content: center | start | end | flex-start | flex-end | normal | baseline | first                           baseline | last baseline | space-between | space-around | space-evenly |                            stretch;

  center: Pack items around the center.
  start:  Pack items from the start.
  end: Pack items from the end.
  flex-start:  Pack flex items from the start.
  flex-end: Pack flex items from the end.

  ______Baseline alignment______
  baseline: Specifies participation in first- or last-baseline alignment: aligns the alignment                 baseline of the box's first or last baseline set with the corresponding baseline in the            shared first or last baseline set of all the boxes in its baseline-sharing group.The                fallback alignment for first baseline is start, the one for last baseline is end.

  ______Distributed alignment_________
  space-between: Distribute items evenly The first item is flush with the start,  the last is flush with the end.
  space-around: Distribute items evenly Items have a half-size space on either end.
  space-evenly: Distribute items evenly Items have equal space around them.
  stretch: Distribute items evenly Stretch 'auto'-sized items to fit the container. */

.box5 .flex {
  display: flex;
  flex-wrap: wrap;
}

.box5 :is(.figure1, .figure2, .figure3, .figure4, .figure5, .figure6, .figure7, .figure8, .figure9, .figure10) .flex {
  height: 320px !important;
}

.box5 :is(.figure1, .figure2, .figure3, .figure4, .figure5, .figure6, .figure7, .figure8, .figure9, .figure10) {
  width: 20%;
}


.box5 .figure1 .flex {
  align-content: stretch;
}

.box5 .figure2 .flex {
  align-content: center;
}

.box5 .figure3 .flex {
  align-content: flex-start;
}

.box5 .figure4 .flex {
  align-content: flex-end;
}

.box5 .figure5 .flex {
  align-content: baseline;
}

.box5 .figure6 .flex {
  align-content: first baseline;
}

.box5 .figure7 .flex {
  align-content: last baseline;
}

.box5 .figure8 .flex {
  align-content: space-between;
}

.box5 .figure9 .flex {
  align-content: space-around;
}

.box5 .figure10 .flex {
  align-content: space-evenly;
}



/* align-items:
The CSS align-items property sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. 

The interactive example below demonstrates some of the values for align-items using grid layout.

Syntax:
        align-items: normal | stretch | center | start | end | flex-start |  flex-end |  self-start         | self-end | baseline | baseline | last baseline;

  center: Pack items around the center.
  start:  Pack items from the start.
  end: Pack items from the end.
  flex-start:  Pack flex items from the start.
  flex-end: Pack flex items from the end.
  stretch: Distribute items evenly Stretch 'auto'-sized items to fit the container.
  self-start: Pack flex items from the start.
  self-end: Pack flex items from the end.
  baseline: Specifies participation in first- or last-baseline alignment: aligns the alignment baseline of the box's first or last baseline set with the corresponding baseline in the shared first or last baseline set of all the boxes in its baseline-sharing group.The fallback alignment for first baseline is start, the one for last baseline is end. */

.box4 figure .flex {
  display: flex;
}

.box4 .flex .flex-item:nth-child(1) {
  height: 90px !important;
}

.box4 .flex .flex-item:nth-child(2) {
  height: 50px !important;
}

.box4 .flex .flex-item:nth-child(3) {
  height: 35px !important;
}

.box4 .flex .flex-item:nth-child(4) {
  height: 70px !important;
}


.box4 .figure1 .flex {
  align-items: stretch;
}

.box4 .figure2 .flex {
  align-items: center;
}

.box4 .figure3 .flex {
  align-items: flex-start;
}

.box4 .figure4 .flex {
  align-items: flex-end;
}

.box4 .figure5 .flex {
  align-items: baseline;
}

.box4 .figure6 .flex {
  align-items: first baseline;
}

.box4 .figure7 .flex {
  align-items: last baseline;
}

/* Flex item properties: */


/* align-self:
The align-self CSS property overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.

The property doesn't apply to block-level boxes, or to table cells. If a flexbox item's cross-axis margin is auto, then align-self is ignored.

Syntax:
       align-self: normal | stretch | center | start | end | flex-start |  flex-end |  self-start | self-end | baseline | baseline | last baseline | auto;

  center: Put the item around the center.
  start:  Put the item at the start. 
  end: Put the item at the end.
  self-start:  Align the item flush at the start.
  self-end:  Align the item flush at the end. 
  flex-start:  Put the flex item at the start. 
  flex-end: Put the flex item at the end. 
  stretch: Stretch 'auto'-sized items to fit the container.
  baseline: Specifies participation in first- or last-baseline alignment: aligns the alignment baseline of the box's first or last baseline set with the corresponding baseline in the shared first or last baseline set of all the boxes in its baseline-sharing group.The fallback alignment for first baseline is start, the one for last baseline is end. */

.box6 figure .flex {
  display: flex;
}

.box6 .flex .flex-item:nth-child(1) {
  height: 140px !important;
}

.box6 .flex .flex-item:nth-child(2) {
  height: 30px !important;
}

.box6 .flex .flex-item:nth-child(3) {
  height: 140px !important;
}

.box6 .figure1 .flex-item:nth-child(2) {
  align-self: center;
}

.box6 .figure2 .flex-item:nth-child(2) {
  align-self: self-start;
}

.box6 .figure3 .flex-item:nth-child(2) {
  align-self: self-end;
}

.box6 .figure4 .flex-item:nth-child(2) {
  align-self: flex-start;
}

.box6 .figure5 .flex-item:nth-child(2) {
  align-self: flex-end;
}

.box6 .figure6 .flex-item:nth-child(2) {
  align-self: baseline;
}

.box6 .figure7 .flex-item:nth-child(2) {
  align-self: first baseline;
}

.box6 .figure8 .flex-item:nth-child(2) {
  align-self: last baseline;
}

.box6 .figure9 .flex-item:nth-child(2) {
  align-self: stretch;
}



/* order:
The order CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending order value and then by their source code order.

Syntax:
        order: 5 | -5;

Since order is only meant to affect the visual order of elements and not their logical or tab order. order must not be used on non-visual media such as speech. */
.box7 .figure {
  width: 80%;
}

.box7 .figure .flex {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.box7 .figure .flex .flex-item:nth-child(1) {
  order: 2;
}

.box7 .figure .flex .flex-item:nth-child(2) {
  order: 3;
}

.box7 .figure .flex .flex-item:nth-child(3) {
  order: 1;
}

.box7 .figure .flex .flex-item:nth-child(4) {
  order: 3;
}

.box7 .figure .flex .flex-item:nth-child(5) {
  order: 1;
}


.wrapper {
  display: flex;
  justify-content: center;
}

.wrapper .card {
  background-color: white;

  display: flex;
  flex-direction: column;
}

.wrapper .card h2 {
  text-align: center;
  font-size: 16px;
  color: black;
  font-weight: 400;
}

.wrapper .card .date {
  text-align: right;

  order: -1;
  align-self: flex-end;
}


/* gaps , column-gaps and row-gaps */
.gaps {
  /* width: 60%; */
  margin: 0 160px;
  background-color: #656161;
  padding: 8px 0;

  display: flex;
  flex-wrap: wrap;

  gap: 38px;
  /* A shorthand that sets both together */
  /* column-gap: 30px; /* creates gaps between items on the main axis.*/
  /* row-gap: 30px; /* creates gaps between flex lines, when you have flex-wrap set to wrap */

}


/* Using auto margins for main axis alignment */
.item {
  width: 90px;
  height: 90px;
  background-color: hotpink;
  margin: 5px;

  font-size: 20px;
  font-weight: 900;
  letter-spacing: 1px;
  text-transform: uppercase;
  color: white;
  border-radius: 5px;

  display: flex;
  align-items: center;
  justify-content: center;
}

.container {
  border: 3px dotted black;
  padding: 10px;

  display: flex;
  justify-content: space-around;
}

.margin-itme1 {
  margin-right: auto;
}

.margin-itme3 {
  /* margin-left: auto; */
  margin-right: auto;
}




/* flex-basis:
The flex-basis CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with box-sizing.

The flex-grow and flex-shrink properties are both set to 1 on all these items, indicating that the flex item can grow and shrink from the initial flex-basis.

The demo then changes the flex-basis on the first item. It will then grow and shrink from that flex-basis. This means that, for example, when the flex-basis of the first item is 200px, it will start out at 200px but then shrink to fit the space available with the other items being at least min-content sized.

Syntax:
        flex-basis: unit | max-content | min-content | fit-content; */

.basis .item1 {
  width: 100px;
  height: 90px;
  font-size: 20px;
  font-weight: 900;
  text-transform: uppercase;
  color: white;
  border-radius: 5px;
  background-color: hotpink;

  display: flex;
  align-items: center;
  justify-content: space-evenly;
}

.basis {
  padding: 10px 0;
  width: 100% !important;
  margin: 0 auto;

  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
  align-items: center;
}

.basis-itmen1{
  background-color: red !important;
  flex-basis: 400px;
}
.basis-itmen4{
  background-color: #e2657a;
  flex-basis: 500px;
}


/* flex-grow:
The flex-grow CSS property sets the flex grow factor, which specifies how much of the flex container's remaining space should be assigned to the flex item's main size.

When the flex-container's main size is larger than the combined main size's of the flex items, the extra space is distributed among the flex items, with each item growth being their growth factor value as a proportion of the sum total of all the container's items' flex grow factors.

Syntax:
        flex-grow: number;


The main size is either width or height of the item which is dependent on the flex-direction value.
flex-grow is used alongside the other flex properties flex-shrink and flex-basis, and normally defined using the flex shorthand to ensure all values are set. */

.grow .item {
  height: 90px;
  font-size: 20px;
  font-weight: 900;
  text-transform: uppercase;
  color: white;
  border-radius: 5px;

  display: flex;
  align-items: center;
  justify-content: center;
}

.grow {
  padding: 10px 0;
  /* width: 1000px !important; */
  margin: 0 auto;

  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  align-items: stretch;
}

.margin-itme1 {
  flex-grow: 1;
  background-color: red;
}

.margin-itme2 {
  flex-grow: 3;
  background-color: blue;
}

.margin-itme3 {
  flex-grow: 1;
  background-color: yellow;
}

.margin-itme4 {
  flex-grow: 4;
  background-color: green;
}



/* flex-shrink:
The flex-shrink CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to flex-shrink.

In use, flex-shrink is used alongside the other flex properties flex-grow and flex-basis, and normally defined using the flex shorthand.

Syntax:
        flex-shrink: number; */

.shrink .item2 {
  width: 100px;
  height: 90px;
  font-size: 20px;
  font-weight: 900;
  text-transform: uppercase;
  color: white;
  border-radius: 5px;
  background-color: hotpink;

  display: flex;
  align-items: center;
  justify-content: center;
}

.shrink {
  padding: 10px 0;
  width: 100% !important;

  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
}

.shrink-item1{
  background-color:  green !important;
  flex-basis: 400px;
  flex-shrink: 0;
}
.shrink-item3{
  background-color:  greenyellow !important;
  flex-basis: 300px;
  flex-shrink: 1;
}


/* flex shortand  */
/* The flex CSS shorthand property sets how a flex item will grow or shrink to fit the space available in its flex container. */
/* Constituent properties
This property is a shorthand for the following CSS properties:
1. flex-grow
2. flex-shrink
3. flex-basis */

  /* Syntax */
    /* Keyword values */
          /* flex: auto;
          flex: initial;
          flex: none; */

    /* One value, unitless number: flex-grow flex-basis is then equal to 0. */
          /* flex: 2; */

    /* One value, width/height: flex-basis */
          /* flex: 10em;
          flex: 30%;
          flex: min-content; */

    /* Two values: flex-grow | flex-basis */
          /* flex: 1 30px; */

    /* Two values: flex-grow | flex-shrink */
          /* flex: 2 2; */

    /* Three values: flex-grow | flex-shrink | flex-basis */
          /* flex: 2 2 10%; */

  /* The flex property may be specified using one, two, or three values.

      1. One-value syntax: the value must be one of:
            -> a valid value for <flex-grow>: then the shorthand expands to flex: <flex-grow> 1 0.
            -> a valid value for <flex-basis>: then the shorthand expands to flex: 1 1 <flex-basis>.
            -> the keyword none or one of the global keywords.
      2. Two-value syntax:
            -> The first value must be a valid value for flex-grow.
            -> The second value must be one of:
            -> a valid value for flex-shrink: then the shorthand expands to flex: <flex-grow> <flex-shrink> 0.
            -> a valid value for flex-basis: then the shorthand expands to flex: <flex-grow> 1 <flex-basis>.
          Three-value syntax: the values must be in the following order:
            -> a valid value for flex-grow.
            -> a valid value for flex-shrink.
            -> a valid value for flex-basis. */


/* Mastering wrapping of flex items */

/* .a{
  width: 550px;
  border: 1px solid black;
  padding: 10px;

  display: flex;
  flex-wrap: wrap;
  gap: 5px;
}

.a>*{
  flex: 1 1 160px;

  border: 1px solid red;
  background-color: hotpink;
} */


.a{
  /* width: 550px; */
  height: 300px;
  border: 1px solid black;
  padding: 10px;

  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  gap: 5px;
}

.a>*{
  flex: 1 1 90px;

  border: 1px solid red;
  background-color: hotpink;
}


