/** CSS animations make it possible to animate transitions from one CSS style configuration to another. */

/** Animations consist of two components, a style describing the CSS animation and a set of keyframes that indicate the start and end states of the animation's style, as well as possible intermediate waypoints. */


/*todo There are three key advantages to CSS animations over traditional script-driven animation techniques: */
/* 1. They're easy to use for simple animations; you can create them without even having to know JavaScript.
2. The animations run well, even under moderate system load. Simple animations can often perform poorly in JavaScript. 
3. Letting the browser control the animation sequence lets the browser optimize performance and efficiency. */


/*todo Configuring an animation */
/** To create a CSS animation sequence, you style the element you want to animate with the animation property or its sub-properties. This lets you configure the timing, duration, and other details of how the animation sequence should progress.  */

/** The sub-properties of the animation property are: */

/* animation-composition: To use when multiple animations affect the same property simultaneously. This property is not part of the animation shorthand property.

animation-delay:  The delay between an element loading and the start of an animation sequence.

animation-direction: An animation's first iteration should be forward or backward and whether subsequent iterations should alternate direction on each run through the sequence or reset to the start point and repeat.

animation-duration: The length of time in which an animation completes one cycle.

animation-fill-mode: An animation applies styles to its target before and after it runs.

animation-iteration-count: The number of times an animation should repeat.

animation-name: The name of the @keyframes at-rule describing an animation's keyframes.

animation-play-state: Whether to pause or play an animation sequence.

animation-timing-function: An animation transitions through keyframes by establishing acceleration curves. */


/*todo Defining animation sequence using keyframes */
/* This is done by establishing one or more keyframes using the @keyframes at-rule. */

/* 0% indicates the first moment of the animation sequence, while 100% indicates the final state of the animation. Because these two times are so important, they have special aliases: from and to. Both are optional. If from/0% or to/100% is not specified, the browser starts or finishes the animation using the computed values of all attributes. */


/*todo Using the animation shorthand */
/* The animation shorthand is useful for saving space.  */
/* p{
    animation-name: slidein;
    animation-delay: 3s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
} */

/* ...could be replaced by using the animation shorthand. */
/* p{
    animation: 3s infinite alternate slidein;
} */


/*todo Setting multiple animation property values */
/* The CSS animation longhand properties can accept multiple values, separated by commas.
This feature can be used when you want to apply multiple animations in a single rule and set different durations, iteration counts, etc., for each of the animations. */


/* In this first example, there are three duration and three iteration count values. So each animation is assigned a value of duration and iteration count with the same position as the animation name. The fadeInOut animation is assigned a duration of 2.5s and an iteration count of 2, and the bounce animation is assigned a duration of 1s and an iteration count of 5.

animation-name: fadeInOut, moveLeft300px, bounce;
animation-duration: 2.5s, 5s, 1s;
animation-iteration-count: 2, 1, 5; */


/* In this second example, three animation names are set, but there's only one duration and iteration count. In this case, all three animations are given the same duration and iteration count.

animation-name: fadeInOut, moveLeft300px, bounce;
animation-duration: 3s;
animation-iteration-count: 1; */


/* In this third example, three animations are specified, but only two durations and iteration counts.
So, fadeInOut gets a duration of 2.5s, and moveLeft300px gets a duration of 5s, which is the last value in the list of duration values. The duration value assignment now resets to the first value; bounce, therefore, gets a duration of 2.5s. The iteration count values (and any other property values you specify) will be assigned in the same way.

animation-name: fadeInOut, moveLeft300px, bounce;
animation-duration: 2.5s, 5s;
animation-iteration-count: 2, 1; 

there are five animation-duration values for three animation-name values, then the extra or unused animation property values, in this case, two animation-duration values, don't apply to any animation and are ignored.*/


/*todo Making text slide across the browser window */
/* This simple example styles the <p> element so that the text slides */

/* Repeating the animation */
/* To make the animation repeat itself, use the animation-iteration-count property to indicate how many times to repeat the animation.  */

/* Making the animation move back and forth */
/* What we really want is for it to move back and forth across the screen. That's easily accomplished by setting animation-direction to alternate: */

p {
    font-size: 25px;
    color: red;

    /* animation-name: slidein;
    animation-duration: 3s;
    animation-iteration-count: infinite;
    animation-direction: alternate; */
}

@keyframes slidein {
    from {
        margin-left: 100%;
        width: 300%;
    }

    /* Adding another keyframe */
    /* Let's say we want the header's font size to increase as it moves from right to left for a while, then to decrease back to its original size. That's as simple as adding this keyframe: */
    /* This tells the browser that 75% of the way through the animation sequence, the header should have its left margin at 25% and the width should be 150%. */

    /* 75%{
        font-size: 300%;
        margin-left: 25%;
        width: 150%;
    } */
    to {
        margin-left: 0%;
        width: 100%;
    }
}

/* In this example the style for the <p> element specifies that the animation should take 3 seconds to execute from start to finish, using the animation-duration property, and that the name of the @keyframes at-rule defining the keyframes for the animation sequence is named "slidein". */

/* The keyframes are defined using the @keyframes at-rule. In this case, we have just two keyframes. The first occurs at 0% (using the alias from). Here, we configure the left margin of the element to be at 100% (that is, at the far right edge of the containing element), and the width of the element to be 300% (or three times the width of the containing element). This causes the first frame of the animation to have the header drawn off the right edge of the browser window.
The second (and final) keyframe occurs at 100% (using the alias to). The left margin is set to 0% and the width of the element is set to 100%. This causes the header to finish its animation flush against the left edge of the content area. */

span{
    display: inline-block;
    margin: 5px;
    width: 20px;
    height: 0;
    background-color: aqua;
    border-radius: 5px;

    /* animation-name: slidein1;
    animation-duration: 1s;
    animation-iteration-count: infinite;
    animation-direction: alternate; */
    
}

@keyframes slidein1{
    0%{
        height: 0;
    }
    /* 25%{
        height: 25px;
    }
    50%{
        height: 50px;
    }
    75%{
        height: 75px;
    } */
    100%{
        height: 100px;
    }
}



.spiner{
    width: 120px;
    height: 120px;
    border-radius: 50%;
    border: 30px solid rgb(125, 124, 126);

    border-top: 28px solid red;

    animation-name: in;
    animation-duration: 1s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
}

@keyframes in {
    from{
        transform: rotate(0deg);
    }   
    to{
        transform: rotate(360deg);
    }
}




/* @keyframes:  The @keyframes CSS at-rule controls the intermediate steps in a CSS animation sequence by defining styles for keyframes (or waypoints) along the animation sequence. This gives more control over the intermediate steps of the animation sequence than transitions. */

/* Syntax*/

@keyframes slidein {
    from{
        transform: translateX(0%);
    }
    to{
        transform: translateX(100%);
    }
}

/* Values: 
from:  A Starting offset to 0%
to: An ending offset to 100%  */

/* Valid keyframe lists:  If a keyframe rule doesn't specify the start or end states of the animation (that is, 0%/from and 100%/to), browsers will use the element's existing styles for the start/end states.  */




/* Animation
The animation shorthand CSS property applies an animation between styles. It is a shorthand for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, animation-play-state, and animation-timeline. */

/* Constituent properties
This property is a shorthand for the following CSS properties:

animation-delay
animation-direction
animation-duration
animation-fill-mode
animation-iteration-count
animation-name
animation-play-state
animation-timeline
animation-timing-function */


/* Syntax */

/* @keyframes duration | easing-function | delay | iteration-count | direction | fill-mode | play-state | name */
/* animation: 3s ease-in 1s 2 reverse both paused slidein; */

/* @keyframes duration | easing-function | delay | name */
/* animation: 3s linear 1s slidein; */

/* two animations  */
/* animation:
  3s linear slidein,
  3s ease-out 5s slideout; */




/* animation-name: The animation-name CSS property specifies the names of one or more @keyframes at-rules that describe the animation to apply to an element. */
/* Multiple @keyframe at-rules are specified as a comma-separated list of names. */

/* animation-name: none | tezt_05 | -seplific | test1 , animation5; */




/* animation-duration:  The animation-duration CSS property sets the length of time that an animation takes to complete one cycle.*/

/* Syntax */
/* animation-duration: auto | 6s | 120ms | 10s , 35s , 230ms; */




/* animation-timing-function:  The animation-timing-function CSS property sets how an animation progresses through the duration of each cycle.*/

/* Syntax*/

/* Keyword values */
/* animation-timing-function: ease | ease-in | ease-out | ease-in-out | linear | step-start | step-end */

/* Function values */
/* animation-timing-function: cubic-bezier(0.1, 0.7, 1, 0.1) | steps(4, end); */

/* Steps Function keywords */
/* animation-timing-function: steps(4, jump-start) | steps(10, jump-end) | steps(20, jump-none) | steps(5, jump-both) | steps(6, start) | steps(8, end); */

/* Multiple animations */
/* animation-timing-function: ease, step-start, cubic-bezier(0.1, 0.7, 1, 0.1); */

/* 
esse: the default value, increases in velocity towards the middle of the animation, slowing back down at the end.
linear: animates at an even speed.
ease-in: starts off slowly, with the speed of the transition of the animating property increasing until complete.
ease-out: starts quickly, slowing down the animation continues.
ease-in-out: the animating properties slowly transitioning, speeding up, and then slowing down again.
cubic-bezier(p1, p2, p3, p4): An author defined cubic-bezier curve, where the p1 and p3 values must be in the range of 0 to 1.
steps(n, <jumpterm>): Displays an animation iteration along n stops along the transition, displaying each stop for equal lengths of time. For example, if n is 5, there are 5 steps.
jump-start: Denotes a left-continuous function, so that the first jump happens when the animation begins;
jump-end: Denotes a right-continuous function, so that the last jump happens when the animation ends;
jump-none: There is no jump on either end. Instead, holding at both the 0% mark and the 100% mark, each for 1/n of the duration.
jump-both: Includes pauses at both the 0% and 100% marks, effectively adding a step during the animation iteration.
start: Same as jump-start.
end: Same as jump-end.
step-start: Equal to steps(1, jump-start)
step-end: Equal to steps(1, jump-end)
*/




/* animation-delay: The animation-delay CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. */

/* Syntax */
/* animation-delay: 3s | 0s | -1500ms | 2.1s , 400ms; */



/* animation-iteration-count */
/* The animation-iteration-count CSS property sets the number of times an animation sequence should be played before stopping. */

/* Syntax */
/* animation-iterations-count: infinite | 3 | 2.4 | 2 , 0 , infinite; */



/* animation-direction:  The animation-direction CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.*/

/* Syntax */
/* animation-direction: normal | reverse | alternaate | alternate-reverse | normal , reverse; */

