/* accent-color */
/* The accent-color CSS property sets the accent color for user-interface controls generated by some elements.

Browsers that support accent-color currently apply it to the following HTML elements:

<input type="checkbox">
<input type="radio">
<input type="range">
<progress>


Syntax: 
        accent-colorr: auto | darkred | #5467e6 | rgb(0 255 0); */


h3:nth-child(1){
    color: red;
}

input{
    display: block;
    width: 40px;
    height: 40px;
    accent-color: red;
    font-size: 30px;
}


/* aspect-ratio */
/* The aspect-ratio CSS property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio. The specified aspect ratio is used in the calculation of auto sizes and some other layout functions.

At least one of the box's sizes needs to be automatic in order for aspect-ratio to have any effect.

Syntax: 
            aspect-ratio: 1/1 | 16/9 | auto 3/4 | 9/6 auto; */

.image img{
    width: 200px;
    aspect-ratio: 16/9;
}



/* not proper working baad me kam karna h */
.container{
    display: flex;
    gap: 15px;
}

.container div{
    background-color: yellow;
    /* width: 100px; */
    /* height: auto; */

    display: flex;
    align-items: center;
    justify-content: center;
}



.container .child{
    /* aspect-ratio: 1/1; */
}
.container .child1{
    /* aspect-ratio: 0.5; */
}
.container .child2{
    /* aspect-ratio: 1; */
}
.container .child3{
    aspect-ratio: 1/0.5;
    background-color: red;
}
.container .child4{
    /* aspect-ratio: 16/9; */
}


div {
    display: inline-flex;
    background-color: lime;
    justify-content: center;
  }
  
  div {
    width: 100px;
    height: auto;
  }
  div:nth-child(1) {
    aspect-ratio: 1/1;
  }
  div:nth-child(2) {
    aspect-ratio: 0.5;
  }
  div:nth-child(3) {
    aspect-ratio: 1;
  }
  div:nth-child(4) {
    aspect-ratio: 1/0.5;
  }
  div:nth-child(5) {
    aspect-ratio: 16/9;
  }


/* box-shadow */
/* The box-shadow CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.

The box-shadow property enables you to cast a drop shadow from the frame of almost any element. If a border-radius is specified on the element with a box shadow, the box shadow takes on the same rounded corners.


Syntax: 
        ___keyword value____
        box-shadow: none;

        ___A color and two length value___
        color lenght length
        box-shadow: red 10px 20px;

        ___three length values and a color 
        length length length vlane___
        box-shadow: 5px 5px 3px red;

        ___insert, lenght value and a color___
        inset lenght ltnght red;
        box-shadow:inset 5px 7px red;

        ___any number of shadow , separated by commas___
        box-shadow: 5px 8px red inset , -1rem 0 0.4rem olive;

    Specify a single box-shadow using:

    Two, three, or four <length> values.
    If only two values are given, they are interpreted as <offset-x> and <offset-y> values.
    If a third value is given, it is interpreted as a <blur-radius>.
    If a fourth value is given, it is interpreted as a <spread-radius>.
    Optionally, the inset keyword.
    Optionally, a <color> value. */
  
.box-shadow{
  padding: 50px;
  background-color: aqua;
  width: 50%;
  font-size: 22px;
  font-weight: 800;

  box-shadow: 5px 9px 40px red, inset -25px -25px 33px rgb(94, 189, 94);
}



/* captio-side */
/* The caption-side CSS property puts the content of a table's <caption> on the specified side. The values are relative to the writing-mode of the table.

Syntax:
        caption-side: top | bottom | block-start | block-end | inline-start | inline-end; */


.top{
  margin: 20px auto;  
  border-collapse: collapse;
}

th , td{
  border: 1px solid black;
  width: 120px;
  height: 40px;
  text-align: center;
}
.top caption{
  border: 1px solid black;
  border-top: none;
  padding: 10px;
  font-weight: 800;
  font-size: 18px;
  caption-side: bottom;
}



/* caret-color */
/* The caret-color CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. This is sometimes referred to as the text input cursor.

The caret appears in elements such as <input> or those with the contenteditable attribute.  By default, it is black, but its color can be altered with this property.

Syntax: 
        caret-color: red |auto | transparent |currentcolor; */

input{
  width: 80%;
}

.custom{
  caret-color: red;
}
p .custom{
  caret-color: blue;
}

input::selection{
  background-color: red;
  color: white;
}

/* clip-path */
/* The clip-path CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.

Syntax: 
        clip-path: none;
        clip-path: url('');
        clip-path: margin-box | padding-box | content-box | border-box | fill-box | view-box |stroke-box;
        clip-path: inset() | circle() | ellipse() | polygon() | path();
        clip-path: margin-box circle(50px at 0 100px); */

.image{
  margin: 10px auto;
  width: 100%;
}

.image img{
  /* clip-path: polygon(0% 15%, 15% 15%, 15% 0%, 85% 0%, 85% 15%, 100% 15%, 100% 85%, 85% 85%, 85% 100%, 15% 100%, 15% 85%, 0% 85%); */
}

/* cursor */
/* The cursor CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.

The cursor setting should inform users of the mouse operations that can be performed at the current location, including: text selection, activating help or context menus, copying content, resizing tables, and so on.

Syntax: 
        cursor: auto;
        cursor: pointer | zoom-out | url();
        
        ___URL with mandatory  keyword___
        cursor: url(hand.cur) , pointer;

        ___URL and coordinates, with mandatory keyword___
        cursor: url(cursur_1.png) 4 12 , auto;
        cursor: url(cursor_2.png) 2 2 , pointer;

  The cursor property is specified as zero or more <url> values, separated by commas, followed by a single mandatory keyword value. Each <url> should point to an image file. */


/* General:
        auto:The UA will determine the cursor to display based on the current context. E.g., equivalent to text when hovering text.
        default: The platform-dependent default cursor. Typically an arrow.
        none: 	No cursor is rendered.

Links & status:
        context-menu: A context menu is available.
        help: Help information is available.
        pointer: The cursor is a pointer that indicates a link. Typically an image of a pointing hand.
        progress: The program is busy in the background, but the user can still interact with the interface (in contrast to wait).
        wait: The program is busy, and the user can't interact with the interface (in contrast to progress). Sometimes an image of an hourglass or a watch.

Selection:
        cell: The table cell or set of cells can be selected.
        crosshair: 	Cross cursor, often used to indicate selection in a bitmap.
        text: The text can be selected. Typically the shape of an I-beam.
        vertical-text: The vertical text can be selected. Typically the shape of a sideways I-beam.

Drag & Drop:
        alias: An alias or shortcut is to be created.
        copy: Something is to be copied.
        move: Something is to be moved.
        no-drop: An item may not be dropped at the current location.
        not-allowed: The requested action will not be carried out.
        grab: Something can be grabbed (dragged to be moved).
        grabbing: Something is being grabbed (dragged to be moved).

Resizing & Scrolling: 
        all-scroll: Something is being grabbed (dragged to be moved).
        col-resize: The item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.
        row-resize: The item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.
        n-resize: Some edge is to be moved.
        e-resize: Some edge is to be moved.
        s-resize: Some edge is to be moved.
        w-resize: Some edge is to be moved.
        ne-resize: Some edge is to be moved.
        nw-resize: Some edge is to be moved.
        se-resize: Some edge is to be moved.
        sw-resize: Some edge is to be moved.
        ew-resize:Bidirectional resize cursor.
        ns-resize: Bidirectional resize cursor.
        nesw-resize: Bidirectional resize cursor.
        nwse-resize: Bidirectional resize cursor.

Zooming:
        zoon-in: Something can be zoomed (magnified) in or out.
        zoom-out: Something can be zoomed (magnified) in or out. */

.cursor{
  border: 1px solid;
  padding: 10px;
  background-color: red;
  color: white;
  font-weight: 900;
  font-size: 25px;
  border-radius: 8px;
  cursor: ne-resize;
  margin: 0 auto;
  width: 5%;
  display: flex;
  align-items: center;
  justify-content: center;
}


/* empty-cell */
/* The empty-cells CSS property sets whether borders and backgrounds appear around <table> cells that have no visible content.
This property has an effect only when the border-collapse property is separate.

Syntax: 
      empty-cells: show | hide; */

.top{
  border-collapse: separate;
  empty-cells: hide;
}


/* mix-blend-mode */
/* The mix-blend-mode CSS property sets how an element's content should blend with the content of the element's parent and the element's background.

Syntax:
      mix-blend-mode: normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity; */

.image img{
  border-radius: 50%;
  mix-blend-mode: darken;
}


/* opacity */
/* The opacity CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.

Syntax: 
        opacity: 0 | 0.33 | 1 | 0.9 | 90%; */

.opacity{
  background-color: yellow;
  font-weight: bold;
  font-size: 130%;
}

.light {
  opacity: 0.2; /* Barely see the text over the background */
}

.medium {
  opacity: 0.5; /* See the text more clearly over the background */
}

.heavy {
  opacity: 0.9; /* See the text very clearly over the background */
}